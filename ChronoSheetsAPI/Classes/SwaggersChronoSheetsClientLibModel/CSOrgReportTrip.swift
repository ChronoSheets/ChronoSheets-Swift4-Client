//
// CSOrgReportTrip.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CSOrgReportTrip: Codable {

    public enum CSMobilePlatform: String, Codable { 
        case unknown = "Unknown"
        case ios = "iOS"
        case android = "Android"
    }
    public var username: String?
    public var emailAddress: String?
    public var firstName: String?
    public var lastName: String?
    public var tripId: Int?
    public var timesheetId: Int?
    public var vehicleId: Int?
    public var userId: Int?
    public var orgId: Int?
    public var mobilePlatform: CSMobilePlatform?
    public var startDate: Date?
    public var endDate: Date?
    public var vehicleName: String?
    public var vehicleMake: String?
    public var vehicleModel: String?
    public var vehicleYear: String?
    public var costPerKilometer: Double?
    public var tripTotalCost: Double?
    public var totalTripDistanceMeters: Double?
    public var startAddress: String?
    public var endAddress: String?
    public var pathCoordinates: [CSTripCoordinate]?
    public var cacheExpiryDate: Date?


    
    public init(username: String?, emailAddress: String?, firstName: String?, lastName: String?, tripId: Int?, timesheetId: Int?, vehicleId: Int?, userId: Int?, orgId: Int?, mobilePlatform: CSMobilePlatform?, startDate: Date?, endDate: Date?, vehicleName: String?, vehicleMake: String?, vehicleModel: String?, vehicleYear: String?, costPerKilometer: Double?, tripTotalCost: Double?, totalTripDistanceMeters: Double?, startAddress: String?, endAddress: String?, pathCoordinates: [CSTripCoordinate]?, cacheExpiryDate: Date?) {
        self.username = username
        self.emailAddress = emailAddress
        self.firstName = firstName
        self.lastName = lastName
        self.tripId = tripId
        self.timesheetId = timesheetId
        self.vehicleId = vehicleId
        self.userId = userId
        self.orgId = orgId
        self.mobilePlatform = mobilePlatform
        self.startDate = startDate
        self.endDate = endDate
        self.vehicleName = vehicleName
        self.vehicleMake = vehicleMake
        self.vehicleModel = vehicleModel
        self.vehicleYear = vehicleYear
        self.costPerKilometer = costPerKilometer
        self.tripTotalCost = tripTotalCost
        self.totalTripDistanceMeters = totalTripDistanceMeters
        self.startAddress = startAddress
        self.endAddress = endAddress
        self.pathCoordinates = pathCoordinates
        self.cacheExpiryDate = cacheExpiryDate
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(username, forKey: "Username")
        try container.encodeIfPresent(emailAddress, forKey: "EmailAddress")
        try container.encodeIfPresent(firstName, forKey: "FirstName")
        try container.encodeIfPresent(lastName, forKey: "LastName")
        try container.encodeIfPresent(tripId, forKey: "TripId")
        try container.encodeIfPresent(timesheetId, forKey: "TimesheetId")
        try container.encodeIfPresent(vehicleId, forKey: "VehicleId")
        try container.encodeIfPresent(userId, forKey: "UserId")
        try container.encodeIfPresent(orgId, forKey: "OrgId")
        try container.encodeIfPresent(mobilePlatform, forKey: "MobilePlatform")
        try container.encodeIfPresent(startDate, forKey: "StartDate")
        try container.encodeIfPresent(endDate, forKey: "EndDate")
        try container.encodeIfPresent(vehicleName, forKey: "VehicleName")
        try container.encodeIfPresent(vehicleMake, forKey: "VehicleMake")
        try container.encodeIfPresent(vehicleModel, forKey: "VehicleModel")
        try container.encodeIfPresent(vehicleYear, forKey: "VehicleYear")
        try container.encodeIfPresent(costPerKilometer, forKey: "CostPerKilometer")
        try container.encodeIfPresent(tripTotalCost, forKey: "TripTotalCost")
        try container.encodeIfPresent(totalTripDistanceMeters, forKey: "TotalTripDistanceMeters")
        try container.encodeIfPresent(startAddress, forKey: "StartAddress")
        try container.encodeIfPresent(endAddress, forKey: "EndAddress")
        try container.encodeIfPresent(pathCoordinates, forKey: "PathCoordinates")
        try container.encodeIfPresent(cacheExpiryDate, forKey: "CacheExpiryDate")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        username = try container.decodeIfPresent(String.self, forKey: "Username")
        emailAddress = try container.decodeIfPresent(String.self, forKey: "EmailAddress")
        firstName = try container.decodeIfPresent(String.self, forKey: "FirstName")
        lastName = try container.decodeIfPresent(String.self, forKey: "LastName")
        tripId = try container.decodeIfPresent(Int.self, forKey: "TripId")
        timesheetId = try container.decodeIfPresent(Int.self, forKey: "TimesheetId")
        vehicleId = try container.decodeIfPresent(Int.self, forKey: "VehicleId")
        userId = try container.decodeIfPresent(Int.self, forKey: "UserId")
        orgId = try container.decodeIfPresent(Int.self, forKey: "OrgId")
        mobilePlatform = try container.decodeIfPresent(CSMobilePlatform.self, forKey: "MobilePlatform")
        startDate = try container.decodeIfPresent(Date.self, forKey: "StartDate")
        endDate = try container.decodeIfPresent(Date.self, forKey: "EndDate")
        vehicleName = try container.decodeIfPresent(String.self, forKey: "VehicleName")
        vehicleMake = try container.decodeIfPresent(String.self, forKey: "VehicleMake")
        vehicleModel = try container.decodeIfPresent(String.self, forKey: "VehicleModel")
        vehicleYear = try container.decodeIfPresent(String.self, forKey: "VehicleYear")
        costPerKilometer = try container.decodeIfPresent(Double.self, forKey: "CostPerKilometer")
        tripTotalCost = try container.decodeIfPresent(Double.self, forKey: "TripTotalCost")
        totalTripDistanceMeters = try container.decodeIfPresent(Double.self, forKey: "TotalTripDistanceMeters")
        startAddress = try container.decodeIfPresent(String.self, forKey: "StartAddress")
        endAddress = try container.decodeIfPresent(String.self, forKey: "EndAddress")
        pathCoordinates = try container.decodeIfPresent([CSTripCoordinate].self, forKey: "PathCoordinates")
        cacheExpiryDate = try container.decodeIfPresent(Date.self, forKey: "CacheExpiryDate")
    }
}

