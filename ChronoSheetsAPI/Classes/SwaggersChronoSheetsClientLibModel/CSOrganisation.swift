//
// CSOrganisation.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CSOrganisation: Codable {

    public var id: Int?
    public var name: String?
    public var addressLine01: String?
    public var addressLine02: String?
    public var suburb: String?
    public var state: String?
    public var postcode: String?
    public var country: String?
    public var phone: String?
    public var emailAddress: String?
    public var timezone: String?
    public var subscriptionCustomerId: String?
    public var signupToken: String?
    public var subscriptionCycleStart: Date?
    public var subscriptionCycleEnd: Date?
    public var pricingPlans: [CSOrganisationPricingPlan]?


    
    public init(id: Int?, name: String?, addressLine01: String?, addressLine02: String?, suburb: String?, state: String?, postcode: String?, country: String?, phone: String?, emailAddress: String?, timezone: String?, subscriptionCustomerId: String?, signupToken: String?, subscriptionCycleStart: Date?, subscriptionCycleEnd: Date?, pricingPlans: [CSOrganisationPricingPlan]?) {
        self.id = id
        self.name = name
        self.addressLine01 = addressLine01
        self.addressLine02 = addressLine02
        self.suburb = suburb
        self.state = state
        self.postcode = postcode
        self.country = country
        self.phone = phone
        self.emailAddress = emailAddress
        self.timezone = timezone
        self.subscriptionCustomerId = subscriptionCustomerId
        self.signupToken = signupToken
        self.subscriptionCycleStart = subscriptionCycleStart
        self.subscriptionCycleEnd = subscriptionCycleEnd
        self.pricingPlans = pricingPlans
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(addressLine01, forKey: "AddressLine01")
        try container.encodeIfPresent(addressLine02, forKey: "AddressLine02")
        try container.encodeIfPresent(suburb, forKey: "Suburb")
        try container.encodeIfPresent(state, forKey: "State")
        try container.encodeIfPresent(postcode, forKey: "Postcode")
        try container.encodeIfPresent(country, forKey: "Country")
        try container.encodeIfPresent(phone, forKey: "Phone")
        try container.encodeIfPresent(emailAddress, forKey: "EmailAddress")
        try container.encodeIfPresent(timezone, forKey: "Timezone")
        try container.encodeIfPresent(subscriptionCustomerId, forKey: "SubscriptionCustomerId")
        try container.encodeIfPresent(signupToken, forKey: "SignupToken")
        try container.encodeIfPresent(subscriptionCycleStart, forKey: "SubscriptionCycleStart")
        try container.encodeIfPresent(subscriptionCycleEnd, forKey: "SubscriptionCycleEnd")
        try container.encodeIfPresent(pricingPlans, forKey: "PricingPlans")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(Int.self, forKey: "Id")
        name = try container.decodeIfPresent(String.self, forKey: "Name")
        addressLine01 = try container.decodeIfPresent(String.self, forKey: "AddressLine01")
        addressLine02 = try container.decodeIfPresent(String.self, forKey: "AddressLine02")
        suburb = try container.decodeIfPresent(String.self, forKey: "Suburb")
        state = try container.decodeIfPresent(String.self, forKey: "State")
        postcode = try container.decodeIfPresent(String.self, forKey: "Postcode")
        country = try container.decodeIfPresent(String.self, forKey: "Country")
        phone = try container.decodeIfPresent(String.self, forKey: "Phone")
        emailAddress = try container.decodeIfPresent(String.self, forKey: "EmailAddress")
        timezone = try container.decodeIfPresent(String.self, forKey: "Timezone")
        subscriptionCustomerId = try container.decodeIfPresent(String.self, forKey: "SubscriptionCustomerId")
        signupToken = try container.decodeIfPresent(String.self, forKey: "SignupToken")
        subscriptionCycleStart = try container.decodeIfPresent(Date.self, forKey: "SubscriptionCycleStart")
        subscriptionCycleEnd = try container.decodeIfPresent(Date.self, forKey: "SubscriptionCycleEnd")
        pricingPlans = try container.decodeIfPresent([CSOrganisationPricingPlan].self, forKey: "PricingPlans")
    }
}

