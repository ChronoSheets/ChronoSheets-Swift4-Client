//
// CSFleetSummaryReportItem.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CSFleetSummaryReportItem: Codable {

    public var totalDistanceMetersFiltered: Double?
    public var totalDistanceMeters: Double?
    public var totalRunningCostDollarsFiltered: Double?
    public var totalRunningCostDollars: Double?
    public var id: Int?
    public var organisationId: Int?
    public var name: String?
    public var costPerKilometer: Double?
    public var make: String?
    public var model: String?
    public var year: String?
    public var licencePlateNumber: String?
    public var isDeleted: Bool?
    public var permittedEmployees: [Int]?


    
    public init(totalDistanceMetersFiltered: Double?, totalDistanceMeters: Double?, totalRunningCostDollarsFiltered: Double?, totalRunningCostDollars: Double?, id: Int?, organisationId: Int?, name: String?, costPerKilometer: Double?, make: String?, model: String?, year: String?, licencePlateNumber: String?, isDeleted: Bool?, permittedEmployees: [Int]?) {
        self.totalDistanceMetersFiltered = totalDistanceMetersFiltered
        self.totalDistanceMeters = totalDistanceMeters
        self.totalRunningCostDollarsFiltered = totalRunningCostDollarsFiltered
        self.totalRunningCostDollars = totalRunningCostDollars
        self.id = id
        self.organisationId = organisationId
        self.name = name
        self.costPerKilometer = costPerKilometer
        self.make = make
        self.model = model
        self.year = year
        self.licencePlateNumber = licencePlateNumber
        self.isDeleted = isDeleted
        self.permittedEmployees = permittedEmployees
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(totalDistanceMetersFiltered, forKey: "TotalDistanceMetersFiltered")
        try container.encodeIfPresent(totalDistanceMeters, forKey: "TotalDistanceMeters")
        try container.encodeIfPresent(totalRunningCostDollarsFiltered, forKey: "TotalRunningCostDollarsFiltered")
        try container.encodeIfPresent(totalRunningCostDollars, forKey: "TotalRunningCostDollars")
        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(organisationId, forKey: "OrganisationId")
        try container.encodeIfPresent(name, forKey: "Name")
        try container.encodeIfPresent(costPerKilometer, forKey: "CostPerKilometer")
        try container.encodeIfPresent(make, forKey: "Make")
        try container.encodeIfPresent(model, forKey: "Model")
        try container.encodeIfPresent(year, forKey: "Year")
        try container.encodeIfPresent(licencePlateNumber, forKey: "LicencePlateNumber")
        try container.encodeIfPresent(isDeleted, forKey: "IsDeleted")
        try container.encodeIfPresent(permittedEmployees, forKey: "PermittedEmployees")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        totalDistanceMetersFiltered = try container.decodeIfPresent(Double.self, forKey: "TotalDistanceMetersFiltered")
        totalDistanceMeters = try container.decodeIfPresent(Double.self, forKey: "TotalDistanceMeters")
        totalRunningCostDollarsFiltered = try container.decodeIfPresent(Double.self, forKey: "TotalRunningCostDollarsFiltered")
        totalRunningCostDollars = try container.decodeIfPresent(Double.self, forKey: "TotalRunningCostDollars")
        id = try container.decodeIfPresent(Int.self, forKey: "Id")
        organisationId = try container.decodeIfPresent(Int.self, forKey: "OrganisationId")
        name = try container.decodeIfPresent(String.self, forKey: "Name")
        costPerKilometer = try container.decodeIfPresent(Double.self, forKey: "CostPerKilometer")
        make = try container.decodeIfPresent(String.self, forKey: "Make")
        model = try container.decodeIfPresent(String.self, forKey: "Model")
        year = try container.decodeIfPresent(String.self, forKey: "Year")
        licencePlateNumber = try container.decodeIfPresent(String.self, forKey: "LicencePlateNumber")
        isDeleted = try container.decodeIfPresent(Bool.self, forKey: "IsDeleted")
        permittedEmployees = try container.decodeIfPresent([Int].self, forKey: "PermittedEmployees")
    }
}

