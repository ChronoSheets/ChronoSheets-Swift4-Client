//
// CSTranscription.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CSTranscription: Codable {

    public enum CSStatus: String, Codable { 
        case saved = "Saved"
        case processing = "Processing"
        case completed = "Completed"
        case failedWithError = "FailedWithError"
    }
    public enum CSMediaType: String, Codable { 
        case other = "Other"
        case mp3 = "Mp3"
        case mp4 = "Mp4"
        case wav = "Wav"
        case flac = "Flac"
    }
    public var id: Int?
    public var orgId: Int?
    public var fileAttachmentId: Int?
    public var created: Date?
    public var status: CSStatus?
    public var mediaType: CSMediaType?
    public var contents: String?


    
    public init(id: Int?, orgId: Int?, fileAttachmentId: Int?, created: Date?, status: CSStatus?, mediaType: CSMediaType?, contents: String?) {
        self.id = id
        self.orgId = orgId
        self.fileAttachmentId = fileAttachmentId
        self.created = created
        self.status = status
        self.mediaType = mediaType
        self.contents = contents
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "Id")
        try container.encodeIfPresent(orgId, forKey: "OrgId")
        try container.encodeIfPresent(fileAttachmentId, forKey: "FileAttachmentId")
        try container.encodeIfPresent(created, forKey: "Created")
        try container.encodeIfPresent(status, forKey: "Status")
        try container.encodeIfPresent(mediaType, forKey: "MediaType")
        try container.encodeIfPresent(contents, forKey: "Contents")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(Int.self, forKey: "Id")
        orgId = try container.decodeIfPresent(Int.self, forKey: "OrgId")
        fileAttachmentId = try container.decodeIfPresent(Int.self, forKey: "FileAttachmentId")
        created = try container.decodeIfPresent(Date.self, forKey: "Created")
        status = try container.decodeIfPresent(CSStatus.self, forKey: "Status")
        mediaType = try container.decodeIfPresent(CSMediaType.self, forKey: "MediaType")
        contents = try container.decodeIfPresent(String.self, forKey: "Contents")
    }
}

