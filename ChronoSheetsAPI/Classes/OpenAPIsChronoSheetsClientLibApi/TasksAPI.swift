//
// TasksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class TasksAPI {
    /**
     Create a task.    Requires the 'ManageJobsAndTask' permission.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) An Insert Task Request object containing values for the new Task to create 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tasksCreateTask(xChronosheetsAuth: String, request: InsertTaskRequest, completion: @escaping ((_ data: ApiResponseInt32?,_ error: Error?) -> Void)) {
        tasksCreateTaskWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth, request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Create a task.    Requires the 'ManageJobsAndTask' permission.
     - POST /Tasks/CreateTask
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) An Insert Task Request object containing values for the new Task to create 
     - returns: RequestBuilder<ApiResponseInt32> 
     */
    open class func tasksCreateTaskWithRequestBuilder(xChronosheetsAuth: String, request: InsertTaskRequest) -> RequestBuilder<ApiResponseInt32> {
        let path = "/Tasks/CreateTask"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseInt32>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Delete a task.    Requires the 'ManageJobsAndTask' permission.
     
     - parameter taskId: (query) The ID of the Task you want to delete 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tasksDeleteTask(taskId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseBoolean?,_ error: Error?) -> Void)) {
        tasksDeleteTaskWithRequestBuilder(taskId: taskId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Delete a task.    Requires the 'ManageJobsAndTask' permission.
     - DELETE /Tasks/DeleteTask
     - parameter taskId: (query) The ID of the Task you want to delete 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseBoolean> 
     */
    open class func tasksDeleteTaskWithRequestBuilder(taskId: Int, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseBoolean> {
        let path = "/Tasks/DeleteTask"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "TaskId": taskId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseBoolean>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get a particular task by Id.   Requires the 'SubmitTimesheets' or 'ManageJobsAndTask' permissions.
     
     - parameter taskId: (query) The ID of the TimesheetTask you want to get 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tasksGetTaskById(taskId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseTimesheetTask?,_ error: Error?) -> Void)) {
        tasksGetTaskByIdWithRequestBuilder(taskId: taskId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get a particular task by Id.   Requires the 'SubmitTimesheets' or 'ManageJobsAndTask' permissions.
     - GET /Tasks/GetTaskById
     - parameter taskId: (query) The ID of the TimesheetTask you want to get 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseTimesheetTask> 
     */
    open class func tasksGetTaskByIdWithRequestBuilder(taskId: Int, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseTimesheetTask> {
        let path = "/Tasks/GetTaskById"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "TaskId": taskId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseTimesheetTask>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get tasks in your organisation.   Requires the 'SubmitTimesheets' or 'ManageJobsAndTask' permissions.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tasksGetTasks(xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseListTimesheetTask?,_ error: Error?) -> Void)) {
        tasksGetTasksWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get tasks in your organisation.   Requires the 'SubmitTimesheets' or 'ManageJobsAndTask' permissions.
     - GET /Tasks/GetTasks
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseListTimesheetTask> 
     */
    open class func tasksGetTasksWithRequestBuilder(xChronosheetsAuth: String) -> RequestBuilder<ApiResponseListTimesheetTask> {
        let path = "/Tasks/GetTasks"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseListTimesheetTask>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get a collection of tasks for a particular Job, specified by JobId.    Requires the 'SubmitTimesheets' or 'ManageJobsAndTask' permissions.
     
     - parameter jobId: (query) The ID of the job 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tasksGetTasksForJob(jobId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseListTimesheetTask?,_ error: Error?) -> Void)) {
        tasksGetTasksForJobWithRequestBuilder(jobId: jobId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get a collection of tasks for a particular Job, specified by JobId.    Requires the 'SubmitTimesheets' or 'ManageJobsAndTask' permissions.
     - GET /Tasks/GetTasksForJob
     - parameter jobId: (query) The ID of the job 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseListTimesheetTask> 
     */
    open class func tasksGetTasksForJobWithRequestBuilder(jobId: Int, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseListTimesheetTask> {
        let path = "/Tasks/GetTasksForJob"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "JobId": jobId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseListTimesheetTask>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update a task.    Requires the 'ManageJobsAndTask' permission.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) An Update Task Request object containing updated fields.  Make sure to specify the Task Id in the request object so that ChronoSheets knows which Task to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tasksUpdateTask(xChronosheetsAuth: String, request: UpdateTaskRequest, completion: @escaping ((_ data: ApiResponseBoolean?,_ error: Error?) -> Void)) {
        tasksUpdateTaskWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth, request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Update a task.    Requires the 'ManageJobsAndTask' permission.
     - PUT /Tasks/UpdateTask
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) An Update Task Request object containing updated fields.  Make sure to specify the Task Id in the request object so that ChronoSheets knows which Task to update 
     - returns: RequestBuilder<ApiResponseBoolean> 
     */
    open class func tasksUpdateTaskWithRequestBuilder(xChronosheetsAuth: String, request: UpdateTaskRequest) -> RequestBuilder<ApiResponseBoolean> {
        let path = "/Tasks/UpdateTask"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseBoolean>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
