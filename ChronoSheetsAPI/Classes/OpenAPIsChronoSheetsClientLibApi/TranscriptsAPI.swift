//
// TranscriptsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class TranscriptsAPI {
    /**
     Get an audio to text transcript for a particular audio file attachment
     
     - parameter fileAttachmentId: (query) The ID of the file attachment that has a transcript.  It should be an audio file attachment. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transcriptsGetMyTranscript(fileAttachmentId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseTranscription?,_ error: Error?) -> Void)) {
        transcriptsGetMyTranscriptWithRequestBuilder(fileAttachmentId: fileAttachmentId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get an audio to text transcript for a particular audio file attachment
     - GET /Transcripts/GetMyTranscript
     - parameter fileAttachmentId: (query) The ID of the file attachment that has a transcript.  It should be an audio file attachment. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseTranscription> 
     */
    open class func transcriptsGetMyTranscriptWithRequestBuilder(fileAttachmentId: Int, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseTranscription> {
        let path = "/Transcripts/GetMyTranscript"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "FileAttachmentId": fileAttachmentId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseTranscription>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get my file transcripts.  Get audio to text transcripts that you've created.
     
     - parameter startDate: (query) The Start date of the date range.  Transcripts after this date will be obtained. 
     - parameter endDate: (query) The End date of the date range.  Transcripts before this date will be obtained. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many transcripts (optional)
     - parameter take: (query) Take this many transcripts (optional)
     - parameter keyword: (query) Search the text content of the transcript keywords (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transcriptsGetMyTranscripts(startDate: Date, endDate: Date, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil, keyword: String? = nil, completion: @escaping ((_ data: ApiResponseForPaginatedListOrgReportTranscript?,_ error: Error?) -> Void)) {
        transcriptsGetMyTranscriptsWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth, skip: skip, take: take, keyword: keyword).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get my file transcripts.  Get audio to text transcripts that you've created.
     - GET /Transcripts/GetMyTranscripts
     - parameter startDate: (query) The Start date of the date range.  Transcripts after this date will be obtained. 
     - parameter endDate: (query) The End date of the date range.  Transcripts before this date will be obtained. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many transcripts (optional)
     - parameter take: (query) Take this many transcripts (optional)
     - parameter keyword: (query) Search the text content of the transcript keywords (optional)
     - returns: RequestBuilder<ApiResponseForPaginatedListOrgReportTranscript> 
     */
    open class func transcriptsGetMyTranscriptsWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil, keyword: String? = nil) -> RequestBuilder<ApiResponseForPaginatedListOrgReportTranscript> {
        let path = "/Transcripts/GetMyTranscripts"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON(), 
            "Keyword": keyword?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseForPaginatedListOrgReportTranscript>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
