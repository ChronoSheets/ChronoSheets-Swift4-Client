//
// TripsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class TripsAPI {
    /**
     Create a new trip.  Important: create a timesheet record before calling this, passing in the new timesheet record id as a reference.    Requires the 'SubmitTimesheets' permission.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) A Create Trip Request object containing values for the new Trip to create 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tripsCreateTrip(xChronosheetsAuth: String, request: CreateTripRequest, completion: @escaping ((_ data: ApiResponseInt32?,_ error: Error?) -> Void)) {
        tripsCreateTripWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth, request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Create a new trip.  Important: create a timesheet record before calling this, passing in the new timesheet record id as a reference.    Requires the 'SubmitTimesheets' permission.
     - POST /Trips/CreateTrip
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) A Create Trip Request object containing values for the new Trip to create 
     - returns: RequestBuilder<ApiResponseInt32> 
     */
    open class func tripsCreateTripWithRequestBuilder(xChronosheetsAuth: String, request: CreateTripRequest) -> RequestBuilder<ApiResponseInt32> {
        let path = "/Trips/CreateTrip"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseInt32>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Get trip by Id.    Requires the 'ViewMyTrips' permission.
     
     - parameter tripId: (query) The ID of the Trip you want to get 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tripsGetMyTripById(tripId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseTrip?,_ error: Error?) -> Void)) {
        tripsGetMyTripByIdWithRequestBuilder(tripId: tripId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get trip by Id.    Requires the 'ViewMyTrips' permission.
     - GET /Trips/GetMyTripById
     - parameter tripId: (query) The ID of the Trip you want to get 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseTrip> 
     */
    open class func tripsGetMyTripByIdWithRequestBuilder(tripId: Int, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseTrip> {
        let path = "/Trips/GetMyTripById"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "TripId": tripId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseTrip>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get my trips.  Get the GPS trips you've recorded and submitted.    Requires the 'ViewMyTrips' permission.
     
     - parameter startDate: (query) The Start date of the date range.  Trips after this date will be obtained. 
     - parameter endDate: (query) The End date of the date range.  Trips before this date will be obtained. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many Trips (optional)
     - parameter take: (query) Take this many Trips (optional)
     - parameter vehicleId: (query) Filter by a particular Vehicle (get trips made with a particular vehicle), specified by VehicleId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tripsGetMyTrips(startDate: Date, endDate: Date, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil, vehicleId: Int? = nil, completion: @escaping ((_ data: ApiResponseForPaginatedListTrip?,_ error: Error?) -> Void)) {
        tripsGetMyTripsWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth, skip: skip, take: take, vehicleId: vehicleId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get my trips.  Get the GPS trips you've recorded and submitted.    Requires the 'ViewMyTrips' permission.
     - GET /Trips/GetMyTrips
     - parameter startDate: (query) The Start date of the date range.  Trips after this date will be obtained. 
     - parameter endDate: (query) The End date of the date range.  Trips before this date will be obtained. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many Trips (optional)
     - parameter take: (query) Take this many Trips (optional)
     - parameter vehicleId: (query) Filter by a particular Vehicle (get trips made with a particular vehicle), specified by VehicleId (optional)
     - returns: RequestBuilder<ApiResponseForPaginatedListTrip> 
     */
    open class func tripsGetMyTripsWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil, vehicleId: Int? = nil) -> RequestBuilder<ApiResponseForPaginatedListTrip> {
        let path = "/Trips/GetMyTrips"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON(), 
            "VehicleId": vehicleId?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseForPaginatedListTrip>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
