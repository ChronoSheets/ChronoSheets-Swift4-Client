//
// FileAttachmentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class FileAttachmentsAPI {
    /**
     Delete a particular timesheet file attachment  Requires the 'SubmitTimesheets' permission.
     
     - parameter fileAttachmentId: (query) The Id of the file attachment to delete 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fileAttachmentsDeleteTimesheetFileAttachment(fileAttachmentId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseBoolean?,_ error: Error?) -> Void)) {
        fileAttachmentsDeleteTimesheetFileAttachmentWithRequestBuilder(fileAttachmentId: fileAttachmentId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Delete a particular timesheet file attachment  Requires the 'SubmitTimesheets' permission.
     - DELETE /FileAttachments/DeleteTimesheetFileAttachment
     - parameter fileAttachmentId: (query) The Id of the file attachment to delete 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseBoolean> 
     */
    open class func fileAttachmentsDeleteTimesheetFileAttachmentWithRequestBuilder(fileAttachmentId: Int, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseBoolean> {
        let path = "/FileAttachments/DeleteTimesheetFileAttachment"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "FileAttachmentId": fileAttachmentId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseBoolean>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get a particular file attachment by ID.  User must own the file attachment for access.
     
     - parameter fileAttachmentId: (query) The ID of the file attachment 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fileAttachmentsGetFileAttachmentById(fileAttachmentId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseTimesheetFileAttachment?,_ error: Error?) -> Void)) {
        fileAttachmentsGetFileAttachmentByIdWithRequestBuilder(fileAttachmentId: fileAttachmentId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get a particular file attachment by ID.  User must own the file attachment for access.
     - GET /FileAttachments/GetFileAttachmentById
     - parameter fileAttachmentId: (query) The ID of the file attachment 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseTimesheetFileAttachment> 
     */
    open class func fileAttachmentsGetFileAttachmentByIdWithRequestBuilder(fileAttachmentId: Int, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseTimesheetFileAttachment> {
        let path = "/FileAttachments/GetFileAttachmentById"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "FileAttachmentId": fileAttachmentId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseTimesheetFileAttachment>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get my file attachments.  Get files you've attached to timesheets.
     
     - parameter startDate: (query) The Start date of the date range.  File attachments after this date will be obtained. 
     - parameter endDate: (query) The End date of the date range.  File attachments before this date will be obtained. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many File attachments (optional)
     - parameter take: (query) Take this many File attachments (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fileAttachmentsGetMyFileAttachments(startDate: Date, endDate: Date, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ApiResponseForPaginatedListTimesheetFileAttachment?,_ error: Error?) -> Void)) {
        fileAttachmentsGetMyFileAttachmentsWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get my file attachments.  Get files you've attached to timesheets.
     - GET /FileAttachments/GetMyFileAttachments
     - parameter startDate: (query) The Start date of the date range.  File attachments after this date will be obtained. 
     - parameter endDate: (query) The End date of the date range.  File attachments before this date will be obtained. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many File attachments (optional)
     - parameter take: (query) Take this many File attachments (optional)
     - returns: RequestBuilder<ApiResponseForPaginatedListTimesheetFileAttachment> 
     */
    open class func fileAttachmentsGetMyFileAttachmentsWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ApiResponseForPaginatedListTimesheetFileAttachment> {
        let path = "/FileAttachments/GetMyFileAttachments"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseForPaginatedListTimesheetFileAttachment>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
