//
// OrganisationGroupUsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class OrganisationGroupUsersAPI {
    /**
     Get a collection of organisation group users that belong to an organisation group.    Requires the 'ManageOrganisationGroups' or 'ManageOrganisationUsers' permissions.
     
     - parameter orgGroupId: (query) An OrganisationGroup Id 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organisationGroupUsersGetOrganisationGroupUsers(orgGroupId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseListUserForManagement?,_ error: Error?) -> Void)) {
        organisationGroupUsersGetOrganisationGroupUsersWithRequestBuilder(orgGroupId: orgGroupId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get a collection of organisation group users that belong to an organisation group.    Requires the 'ManageOrganisationGroups' or 'ManageOrganisationUsers' permissions.
     - GET /OrganisationGroupUsers/GetOrganisationGroupUsers
     - parameter orgGroupId: (query) An OrganisationGroup Id 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseListUserForManagement> 
     */
    open class func organisationGroupUsersGetOrganisationGroupUsersWithRequestBuilder(orgGroupId: Int, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseListUserForManagement> {
        let path = "/OrganisationGroupUsers/GetOrganisationGroupUsers"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "orgGroupId": orgGroupId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseListUserForManagement>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Set the users who belong to an organisation group.    Requires the 'ManageOrganisationGroups' permissions.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) A request object specifying which users belong to an organisation group.  Make sure to specify the OrganisationGroup Id in the request object so that ChronoSheets knows which OrganisationGroup to update. CsvUserIds is a comma separated list of User Ids, e.g. 1,2,3,4 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organisationGroupUsersUpdateOrganisationGroupUsers(xChronosheetsAuth: String, request: SetOrganisationGroupUsersRequest, completion: @escaping ((_ data: ApiResponseBoolean?,_ error: Error?) -> Void)) {
        organisationGroupUsersUpdateOrganisationGroupUsersWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth, request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Set the users who belong to an organisation group.    Requires the 'ManageOrganisationGroups' permissions.
     - PUT /OrganisationGroupUsers/UpdateOrganisationGroupUsers
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) A request object specifying which users belong to an organisation group.  Make sure to specify the OrganisationGroup Id in the request object so that ChronoSheets knows which OrganisationGroup to update. CsvUserIds is a comma separated list of User Ids, e.g. 1,2,3,4 
     - returns: RequestBuilder<ApiResponseBoolean> 
     */
    open class func organisationGroupUsersUpdateOrganisationGroupUsersWithRequestBuilder(xChronosheetsAuth: String, request: SetOrganisationGroupUsersRequest) -> RequestBuilder<ApiResponseBoolean> {
        let path = "/OrganisationGroupUsers/UpdateOrganisationGroupUsers"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseBoolean>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
