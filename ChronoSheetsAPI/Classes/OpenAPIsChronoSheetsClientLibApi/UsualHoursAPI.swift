//
// UsualHoursAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class UsualHoursAPI {
    /**
     Get usual hours (rostered hours) for an employee.  Requires the 'ManageOrganisationUsers' permission.
     
     - parameter userId: (query) The ID of the User for which you want to get UsualHours for 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usualHoursGetUsualHours(userId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseListUsualHoursDay?,_ error: Error?) -> Void)) {
        usualHoursGetUsualHoursWithRequestBuilder(userId: userId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get usual hours (rostered hours) for an employee.  Requires the 'ManageOrganisationUsers' permission.
     - GET /UsualHours/GetUsualHours
     - parameter userId: (query) The ID of the User for which you want to get UsualHours for 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseListUsualHoursDay> 
     */
    open class func usualHoursGetUsualHoursWithRequestBuilder(userId: Int, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseListUsualHoursDay> {
        let path = "/UsualHours/GetUsualHours"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": userId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseListUsualHoursDay>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Set usual hours (rostered hours) for an employee.  Requires the 'ManageOrganisationUsers' permission.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) A Set UsualHours Request object containing updated data.  Make sure to specify the Day types in the request object so that ChronoSheets knows which Days to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usualHoursSetUsualHours(xChronosheetsAuth: String, request: SetUsualHoursRequest, completion: @escaping ((_ data: ApiResponseBoolean?,_ error: Error?) -> Void)) {
        usualHoursSetUsualHoursWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth, request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Set usual hours (rostered hours) for an employee.  Requires the 'ManageOrganisationUsers' permission.
     - PUT /UsualHours/SetUsualHours
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) A Set UsualHours Request object containing updated data.  Make sure to specify the Day types in the request object so that ChronoSheets knows which Days to update 
     - returns: RequestBuilder<ApiResponseBoolean> 
     */
    open class func usualHoursSetUsualHoursWithRequestBuilder(xChronosheetsAuth: String, request: SetUsualHoursRequest) -> RequestBuilder<ApiResponseBoolean> {
        let path = "/UsualHours/SetUsualHours"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseBoolean>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
