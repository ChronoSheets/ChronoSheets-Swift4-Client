//
// TimesheetsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class TimesheetsAPI {
    /**
     Inserts a single timesheet record.    Requires the 'SubmitTimesheets' permission.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) A Timesheet Request object containing values for the new Timesheet to create 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timesheetsCreateSingleTimesheet(xChronosheetsAuth: String, request: Timesheet, completion: @escaping ((_ data: ApiResponseInt32?,_ error: Error?) -> Void)) {
        timesheetsCreateSingleTimesheetWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth, request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Inserts a single timesheet record.    Requires the 'SubmitTimesheets' permission.
     - POST /Timesheets/CreateSingleTimesheet
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) A Timesheet Request object containing values for the new Timesheet to create 
     - returns: RequestBuilder<ApiResponseInt32> 
     */
    open class func timesheetsCreateSingleTimesheetWithRequestBuilder(xChronosheetsAuth: String, request: Timesheet) -> RequestBuilder<ApiResponseInt32> {
        let path = "/Timesheets/CreateSingleTimesheet"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseInt32>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Delete a timesheet.    Requires the 'SubmitTimesheets' permission.
     
     - parameter timesheetId: (query) The ID of the Timesheet you want to delete 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timesheetsDeleteTimesheet(timesheetId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseBoolean?,_ error: Error?) -> Void)) {
        timesheetsDeleteTimesheetWithRequestBuilder(timesheetId: timesheetId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Delete a timesheet.    Requires the 'SubmitTimesheets' permission.
     - DELETE /Timesheets/DeleteTimesheet
     - parameter timesheetId: (query) The ID of the Timesheet you want to delete 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseBoolean> 
     */
    open class func timesheetsDeleteTimesheetWithRequestBuilder(timesheetId: Int, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseBoolean> {
        let path = "/Timesheets/DeleteTimesheet"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "TimesheetId": timesheetId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseBoolean>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get timesheets between start and end dates.  Note: the date range cannot exceed 24 hours.  This method is generally used to get timesheets for a particular day.    Requires the 'SubmitTimesheets' permission.
     
     - parameter startDate: (query) The start date of the date range 
     - parameter endDate: (query) The end date of the date range 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timesheetsGetTimesheets(startDate: Date, endDate: Date, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseListTimesheet?,_ error: Error?) -> Void)) {
        timesheetsGetTimesheetsWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get timesheets between start and end dates.  Note: the date range cannot exceed 24 hours.  This method is generally used to get timesheets for a particular day.    Requires the 'SubmitTimesheets' permission.
     - GET /Timesheets/GetTimesheets
     - parameter startDate: (query) The start date of the date range 
     - parameter endDate: (query) The end date of the date range 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseListTimesheet> 
     */
    open class func timesheetsGetTimesheetsWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseListTimesheet> {
        let path = "/Timesheets/GetTimesheets"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseListTimesheet>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Batch update timesheets.    Requires the 'SubmitTimesheets' permission.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) A BatchUpdateTimesheet Request object containing values for the new Timesheets to create or update.  If the timesheet Id is specified, then an update will be performed, else the timesheet record will be created. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timesheetsUpdateTimesheets(xChronosheetsAuth: String, request: BatchUpdateTimesheetRequest, completion: @escaping ((_ data: ApiResponseListInt32?,_ error: Error?) -> Void)) {
        timesheetsUpdateTimesheetsWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth, request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Batch update timesheets.    Requires the 'SubmitTimesheets' permission.
     - PUT /Timesheets/UpdateTimesheets
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) A BatchUpdateTimesheet Request object containing values for the new Timesheets to create or update.  If the timesheet Id is specified, then an update will be performed, else the timesheet record will be created. 
     - returns: RequestBuilder<ApiResponseListInt32> 
     */
    open class func timesheetsUpdateTimesheetsWithRequestBuilder(xChronosheetsAuth: String, request: BatchUpdateTimesheetRequest) -> RequestBuilder<ApiResponseListInt32> {
        let path = "/Timesheets/UpdateTimesheets"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseListInt32>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
