//
// ReportsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ReportsAPI {
    /**
     * enum for parameter forceOnlyThisChart
     */
    public enum ForceOnlyThisChart_reportsGetAllChartsDataAdmin: String {
        case notForced = "NotForced"
        case seriesJobCodes = "SeriesJobCodes"
        case seriesClients = "SeriesClients"
        case seriesProjects = "SeriesProjects"
        case seriesTasks = "SeriesTasks"
        case totalsClients = "TotalsClients"
        case totalsJobCodes = "TotalsJobCodes"
        case totalsProjects = "TotalsProjects"
        case totalsTasks = "TotalsTasks"
    }

    /**
     Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - parameter forceOnlyThisChart: (query) A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetAllChartsDataAdmin(startDate: Date, endDate: Date, xChronosheetsAuth: String, userIds: String? = nil, forceOnlyThisChart: ForceOnlyThisChart_reportsGetAllChartsDataAdmin? = nil, completion: @escaping ((_ data: ApiResponseCombinedReportsData?,_ error: Error?) -> Void)) {
        reportsGetAllChartsDataAdminWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth, userIds: userIds, forceOnlyThisChart: forceOnlyThisChart).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     - GET /Reports/GetAllChartsDataAdmin
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - parameter forceOnlyThisChart: (query) A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option. (optional)
     - returns: RequestBuilder<ApiResponseCombinedReportsData> 
     */
    open class func reportsGetAllChartsDataAdminWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String, userIds: String? = nil, forceOnlyThisChart: ForceOnlyThisChart_reportsGetAllChartsDataAdmin? = nil) -> RequestBuilder<ApiResponseCombinedReportsData> {
        let path = "/Reports/GetAllChartsDataAdmin"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "UserIds": userIds?.encodeToJSON(), 
            "ForceOnlyThisChart": forceOnlyThisChart?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseCombinedReportsData>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user's own reports.    Requires the 'ViewOwnReports' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetAllChartsDataUser(startDate: Date, endDate: Date, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseCombinedReportsData?,_ error: Error?) -> Void)) {
        reportsGetAllChartsDataUserWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user's own reports.    Requires the 'ViewOwnReports' permission.
     - GET /Reports/GetAllChartsDataUser
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseCombinedReportsData> 
     */
    open class func reportsGetAllChartsDataUserWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseCombinedReportsData> {
        let path = "/Reports/GetAllChartsDataUser"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseCombinedReportsData>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetFleetSummaryAdmin(startDate: Date, endDate: Date, xChronosheetsAuth: String, userIds: String? = nil, completion: @escaping ((_ data: ApiResponseListFleetSummaryReportItem?,_ error: Error?) -> Void)) {
        reportsGetFleetSummaryAdminWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth, userIds: userIds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the 'ReportAdmin' permission.
     - GET /Reports/GetFleetSummaryAdmin
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - returns: RequestBuilder<ApiResponseListFleetSummaryReportItem> 
     */
    open class func reportsGetFleetSummaryAdminWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String, userIds: String? = nil) -> RequestBuilder<ApiResponseListFleetSummaryReportItem> {
        let path = "/Reports/GetFleetSummaryAdmin"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "UserIds": userIds?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseListFleetSummaryReportItem>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get trip by Id, for reporting purposes.    Requires the 'ReportAdmin' permission.
     
     - parameter tripId: (query) The ID of the Trip you want to get 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetOrgTripById(tripId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseTrip?,_ error: Error?) -> Void)) {
        reportsGetOrgTripByIdWithRequestBuilder(tripId: tripId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get trip by Id, for reporting purposes.    Requires the 'ReportAdmin' permission.
     - GET /Reports/GetOrgTripById
     - parameter tripId: (query) The ID of the Trip you want to get 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseTrip> 
     */
    open class func reportsGetOrgTripByIdWithRequestBuilder(tripId: Int, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseTrip> {
        let path = "/Reports/GetOrgTripById"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "TripId": tripId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseTrip>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many items (optional)
     - parameter take: (query) Take this many items (optional)
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetOrganisationTimesheetFileAttachments(startDate: Date, endDate: Date, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil, userIds: String? = nil, completion: @escaping ((_ data: ApiResponseForPaginatedListOrgReportTimesheetFileAttachment?,_ error: Error?) -> Void)) {
        reportsGetOrganisationTimesheetFileAttachmentsWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth, skip: skip, take: take, userIds: userIds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the 'ReportAdmin' permission.
     - GET /Reports/GetOrganisationTimesheetFileAttachments
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many items (optional)
     - parameter take: (query) Take this many items (optional)
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - returns: RequestBuilder<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment> 
     */
    open class func reportsGetOrganisationTimesheetFileAttachmentsWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil, userIds: String? = nil) -> RequestBuilder<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment> {
        let path = "/Reports/GetOrganisationTimesheetFileAttachments"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON(), 
            "UserIds": userIds?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseForPaginatedListOrgReportTimesheetFileAttachment>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many items (optional)
     - parameter take: (query) Take this many items (optional)
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - parameter keywords: (query) Search the transcripts by keyword(s) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetOrganisationTranscripts(startDate: Date, endDate: Date, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil, userIds: String? = nil, keywords: String? = nil, completion: @escaping ((_ data: ApiResponseForPaginatedListOrgReportTranscript?,_ error: Error?) -> Void)) {
        reportsGetOrganisationTranscriptsWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth, skip: skip, take: take, userIds: userIds, keywords: keywords).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the 'ReportAdmin' permission.
     - GET /Reports/GetOrganisationTranscripts
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many items (optional)
     - parameter take: (query) Take this many items (optional)
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - parameter keywords: (query) Search the transcripts by keyword(s) (optional)
     - returns: RequestBuilder<ApiResponseForPaginatedListOrgReportTranscript> 
     */
    open class func reportsGetOrganisationTranscriptsWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil, userIds: String? = nil, keywords: String? = nil) -> RequestBuilder<ApiResponseForPaginatedListOrgReportTranscript> {
        let path = "/Reports/GetOrganisationTranscripts"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON(), 
            "UserIds": userIds?.encodeToJSON(), 
            "Keywords": keywords?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseForPaginatedListOrgReportTranscript>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Reports on Organisation trips (GPS tracking from whole organisation).    Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many items (optional)
     - parameter take: (query) Take this many items (optional)
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetOrganisationTrips(startDate: Date, endDate: Date, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil, userIds: String? = nil, completion: @escaping ((_ data: ApiResponseForPaginatedListOrgReportTrip?,_ error: Error?) -> Void)) {
        reportsGetOrganisationTripsWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth, skip: skip, take: take, userIds: userIds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Reports on Organisation trips (GPS tracking from whole organisation).    Requires the 'ReportAdmin' permission.
     - GET /Reports/GetOrganisationTrips
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many items (optional)
     - parameter take: (query) Take this many items (optional)
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - returns: RequestBuilder<ApiResponseForPaginatedListOrgReportTrip> 
     */
    open class func reportsGetOrganisationTripsWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil, userIds: String? = nil) -> RequestBuilder<ApiResponseForPaginatedListOrgReportTrip> {
        let path = "/Reports/GetOrganisationTrips"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON(), 
            "UserIds": userIds?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseForPaginatedListOrgReportTrip>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_reportsGetRawDataAdmin: String {
        case emailAddress = "EmailAddress"
        case jobCode = "JobCode"
        case taskName = "TaskName"
        case clientName = "ClientName"
        case projectName = "ProjectName"
        case startDate = "StartDate"
        case endDate = "EndDate"
        case spanSeconds = "SpanSeconds"
        case description = "Description"
        case payAmount = "PayAmount"
        case payOvertimeAmount = "PayOvertimeAmount"
        case tripCost = "TripCost"
        case tripDistanceMeters = "TripDistanceMeters"
        case username = "Username"
    }

    /**
     * enum for parameter order
     */
    public enum Order_reportsGetRawDataAdmin: String {
        case ascending = "Ascending"
        case descending = "Descending"
    }

    /**
     Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - parameter sort: (query) Decide which column to sort on (optional)
     - parameter order: (query) Decide which direction to sort the column (optional)
     - parameter skip: (query) Skip this many rows (optional)
     - parameter take: (query) Take this many rows (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetRawDataAdmin(startDate: Date, endDate: Date, xChronosheetsAuth: String, userIds: String? = nil, sort: Sort_reportsGetRawDataAdmin? = nil, order: Order_reportsGetRawDataAdmin? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ApiResponseForPaginatedListRawReportItem?,_ error: Error?) -> Void)) {
        reportsGetRawDataAdminWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth, userIds: userIds, sort: sort, order: order, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     - GET /Reports/GetRawDataAdmin
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - parameter sort: (query) Decide which column to sort on (optional)
     - parameter order: (query) Decide which direction to sort the column (optional)
     - parameter skip: (query) Skip this many rows (optional)
     - parameter take: (query) Take this many rows (optional)
     - returns: RequestBuilder<ApiResponseForPaginatedListRawReportItem> 
     */
    open class func reportsGetRawDataAdminWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String, userIds: String? = nil, sort: Sort_reportsGetRawDataAdmin? = nil, order: Order_reportsGetRawDataAdmin? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ApiResponseForPaginatedListRawReportItem> {
        let path = "/Reports/GetRawDataAdmin"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "UserIds": userIds?.encodeToJSON(), 
            "Sort": sort?.encodeToJSON(), 
            "Order": order?.encodeToJSON(), 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseForPaginatedListRawReportItem>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Gets project cost estimations VS actual cost for date range and users.    Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsProjectCostingsAdmin(startDate: Date, endDate: Date, xChronosheetsAuth: String, userIds: String? = nil, completion: @escaping ((_ data: ApiResponseListProjectCostingReportItem?,_ error: Error?) -> Void)) {
        reportsProjectCostingsAdminWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth, userIds: userIds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Gets project cost estimations VS actual cost for date range and users.    Requires the 'ReportAdmin' permission.
     - GET /Reports/ProjectCostingsAdmin
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. (optional)
     - returns: RequestBuilder<ApiResponseListProjectCostingReportItem> 
     */
    open class func reportsProjectCostingsAdminWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String, userIds: String? = nil) -> RequestBuilder<ApiResponseListProjectCostingReportItem> {
        let path = "/Reports/ProjectCostingsAdmin"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "UserIds": userIds?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseListProjectCostingReportItem>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Timeseries jobs data for the logged in user.    Requires the 'ViewOwnReports' or 'SubmitTimesheets'.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsUserJobsOverTime(startDate: Date, endDate: Date, xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseListJobSeriesReportItem?,_ error: Error?) -> Void)) {
        reportsUserJobsOverTimeWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Timeseries jobs data for the logged in user.    Requires the 'ViewOwnReports' or 'SubmitTimesheets'.
     - GET /Reports/UserJobsOverTime
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseListJobSeriesReportItem> 
     */
    open class func reportsUserJobsOverTimeWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String) -> RequestBuilder<ApiResponseListJobSeriesReportItem> {
        let path = "/Reports/UserJobsOverTime"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseListJobSeriesReportItem>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
