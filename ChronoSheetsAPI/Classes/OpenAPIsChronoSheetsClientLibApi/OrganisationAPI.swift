//
// OrganisationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class OrganisationAPI {
    /**
     Get your organisation.    Requires 'OrganisationAdmin' permission.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organisationGetOrganisation(xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseOrganisation?,_ error: Error?) -> Void)) {
        organisationGetOrganisationWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get your organisation.    Requires 'OrganisationAdmin' permission.
     - GET /Organisation/GetOrganisation
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseOrganisation> 
     */
    open class func organisationGetOrganisationWithRequestBuilder(xChronosheetsAuth: String) -> RequestBuilder<ApiResponseOrganisation> {
        let path = "/Organisation/GetOrganisation"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseOrganisation>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update an organisation.    Requires 'OrganisationAdmin' permission.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) An Update Organsation Request object containing updated fields.  Make sure to specify the Organsation Id in the request object so that ChronoSheets knows which Organsation to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organisationUpdateOrganisation(xChronosheetsAuth: String, request: UpdateOrganisationRequest, completion: @escaping ((_ data: ApiResponseUpdateOrganisationResponse?,_ error: Error?) -> Void)) {
        organisationUpdateOrganisationWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth, request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Update an organisation.    Requires 'OrganisationAdmin' permission.
     - PUT /Organisation/UpdateOrganisation
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) An Update Organsation Request object containing updated fields.  Make sure to specify the Organsation Id in the request object so that ChronoSheets knows which Organsation to update 
     - returns: RequestBuilder<ApiResponseUpdateOrganisationResponse> 
     */
    open class func organisationUpdateOrganisationWithRequestBuilder(xChronosheetsAuth: String, request: UpdateOrganisationRequest) -> RequestBuilder<ApiResponseUpdateOrganisationResponse> {
        let path = "/Organisation/UpdateOrganisation"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseUpdateOrganisationResponse>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
