//
// UserProfileAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class UserProfileAPI {
    /**
     Login to your ChronoSheets account and obtain an Auth Token which you can use for other ChronoSheets API methods.    Does not require any special permissions.
     
     - parameter request: (body) A request object containing your username/email and password. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userProfileDoLogin(request: DoLoginRequest, completion: @escaping ((_ data: ApiResponseDoLoginResponse?,_ error: Error?) -> Void)) {
        userProfileDoLoginWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Login to your ChronoSheets account and obtain an Auth Token which you can use for other ChronoSheets API methods.    Does not require any special permissions.
     - PUT /UserProfile/DoLogin
     - parameter request: (body) A request object containing your username/email and password. 
     - returns: RequestBuilder<ApiResponseDoLoginResponse> 
     */
    open class func userProfileDoLoginWithRequestBuilder(request: DoLoginRequest) -> RequestBuilder<ApiResponseDoLoginResponse> {
        let path = "/UserProfile/DoLogin"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiResponseDoLoginResponse>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Logout of your ChronoSheets account.  This method ends and deletes your active session.    Does not require any special permissions.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userProfileDoLogout(xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseBoolean?,_ error: Error?) -> Void)) {
        userProfileDoLogoutWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Logout of your ChronoSheets account.  This method ends and deletes your active session.    Does not require any special permissions.
     - DELETE /UserProfile/DoLogout
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseBoolean> 
     */
    open class func userProfileDoLogoutWithRequestBuilder(xChronosheetsAuth: String) -> RequestBuilder<ApiResponseBoolean> {
        let path = "/UserProfile/DoLogout"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseBoolean>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get your own profile.  Use this method to obtain detailed information about your ChronoSheets user profile.    Does not require any special permissions.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userProfileGetMyProfile(xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseUserProfile?,_ error: Error?) -> Void)) {
        userProfileGetMyProfileWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get your own profile.  Use this method to obtain detailed information about your ChronoSheets user profile.    Does not require any special permissions.
     - GET /UserProfile/GetMyProfile
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseUserProfile> 
     */
    open class func userProfileGetMyProfileWithRequestBuilder(xChronosheetsAuth: String) -> RequestBuilder<ApiResponseUserProfile> {
        let path = "/UserProfile/GetMyProfile"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseUserProfile>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Keep a session alive.  Use this method to keep a session active.  You could use this to 'ping' ChronoSheets every 'x' minutes to make sure your Auth Token will keep working.    Does not require any special permissions.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userProfileKeepSessionAlive(xChronosheetsAuth: String, completion: @escaping ((_ data: ApiResponseBoolean?,_ error: Error?) -> Void)) {
        userProfileKeepSessionAliveWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Keep a session alive.  Use this method to keep a session active.  You could use this to 'ping' ChronoSheets every 'x' minutes to make sure your Auth Token will keep working.    Does not require any special permissions.
     - GET /UserProfile/KeepSessionAlive
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - returns: RequestBuilder<ApiResponseBoolean> 
     */
    open class func userProfileKeepSessionAliveWithRequestBuilder(xChronosheetsAuth: String) -> RequestBuilder<ApiResponseBoolean> {
        let path = "/UserProfile/KeepSessionAlive"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseBoolean>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update your own profile.  Use this method to update your profile information or update/change your password.    Does not require any special permissions.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) An Update MyProfile Request object containing updated fields. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userProfileUpdateMyProfile(xChronosheetsAuth: String, request: UpdateMyProfileRequest, completion: @escaping ((_ data: ApiResponseUpdateProfileResponse?,_ error: Error?) -> Void)) {
        userProfileUpdateMyProfileWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth, request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Update your own profile.  Use this method to update your profile information or update/change your password.    Does not require any special permissions.
     - PUT /UserProfile/UpdateMyProfile
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body) An Update MyProfile Request object containing updated fields. 
     - returns: RequestBuilder<ApiResponseUpdateProfileResponse> 
     */
    open class func userProfileUpdateMyProfileWithRequestBuilder(xChronosheetsAuth: String, request: UpdateMyProfileRequest) -> RequestBuilder<ApiResponseUpdateProfileResponse> {
        let path = "/UserProfile/UpdateMyProfile"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseUpdateProfileResponse>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
