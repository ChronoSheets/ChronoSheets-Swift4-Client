//
// TimesheetAutomationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class TimesheetAutomationAPI {
    /**
     Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the 'SubmitTimesheets' permission.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timesheetAutomationCreateAutomationStep(xChronosheetsAuth: String, request: CreateAutomationStepRequest, completion: @escaping ((_ data: ApiResponseInt32?,_ error: Error?) -> Void)) {
        timesheetAutomationCreateAutomationStepWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth, request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Creates an automation step.  Timesheet automation is determined by looking at steps taken by the user.  Create a step to log some automation action, such as entering a geofence or tapping on an NFC badge.  Requires the 'SubmitTimesheets' permission.
     - POST /TimesheetAutomation/CreateAutomationStep
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter request: (body)  
     - returns: RequestBuilder<ApiResponseInt32> 
     */
    open class func timesheetAutomationCreateAutomationStepWithRequestBuilder(xChronosheetsAuth: String, request: CreateAutomationStepRequest) -> RequestBuilder<ApiResponseInt32> {
        let path = "/TimesheetAutomation/CreateAutomationStep"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseInt32>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_timesheetAutomationGetTimesheetAutomationAuditTrail: String {
        case userName = "UserName"
        case automationActionType = "AutomationActionType"
        case clientDateTime = "ClientDateTime"
        case isProcessed = "IsProcessed"
    }

    /**
     * enum for parameter order
     */
    public enum Order_timesheetAutomationGetTimesheetAutomationAuditTrail: String {
        case ascending = "Ascending"
        case descending = "Descending"
    }

    /**
     Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the 'ManageGeofencing' permission.
     
     - parameter geofenceId: (query) The ID of the Geofence 
     - parameter userId: (query)  
     - parameter sort: (query)  
     - parameter order: (query)  
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many records (optional)
     - parameter take: (query) Take this many records (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timesheetAutomationGetTimesheetAutomationAuditTrail(geofenceId: Int, userId: Int, sort: Sort_timesheetAutomationGetTimesheetAutomationAuditTrail, order: Order_timesheetAutomationGetTimesheetAutomationAuditTrail, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence?,_ error: Error?) -> Void)) {
        timesheetAutomationGetTimesheetAutomationAuditTrailWithRequestBuilder(geofenceId: geofenceId, userId: userId, sort: sort, order: order, xChronosheetsAuth: xChronosheetsAuth, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the timesheet automation / alerts for geofences activities or NFC tap on/off.  Requires the 'ManageGeofencing' permission.
     - GET /TimesheetAutomation/GetTimesheetAutomationAuditTrail
     - parameter geofenceId: (query) The ID of the Geofence 
     - parameter userId: (query)  
     - parameter sort: (query)  
     - parameter order: (query)  
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Skip this many records (optional)
     - parameter take: (query) Take this many records (optional)
     - returns: RequestBuilder<ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence> 
     */
    open class func timesheetAutomationGetTimesheetAutomationAuditTrailWithRequestBuilder(geofenceId: Int, userId: Int, sort: Sort_timesheetAutomationGetTimesheetAutomationAuditTrail, order: Order_timesheetAutomationGetTimesheetAutomationAuditTrail, xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence> {
        let path = "/TimesheetAutomation/GetTimesheetAutomationAuditTrail"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "GeofenceId": geofenceId.encodeToJSON(), 
            "UserId": userId.encodeToJSON(), 
            "Sort": sort.encodeToJSON(), 
            "Order": order.encodeToJSON(), 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponseForPaginatedListTimesheetAutomationWithOrgAndGeofence>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
