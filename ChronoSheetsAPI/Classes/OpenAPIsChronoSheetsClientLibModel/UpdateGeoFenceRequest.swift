//
// UpdateGeoFenceRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** A request object for updating a new geofence */
public struct UpdateGeoFenceRequest: Codable { 


    public enum AlertSettings: String, Codable {
        case _none = "None"
        case sendWhenEntering = "SendWhenEntering"
        case sendWhenExiting = "SendWhenExiting"
        case sendWhenEnteringOrExiting = "SendWhenEnteringOrExiting"
    }
    public enum TriggerSettings: String, Codable {
        case _none = "None"
        case startTimesheetWhenEntering = "StartTimesheetWhenEntering"
        case stopTimesheetWhenEntering = "StopTimesheetWhenEntering"
        case startOnEnterStopOnLeave = "StartOnEnterStopOnLeave"
    }
    /** The ID of the geofence you want to update */
    public var geofenceId: Int?
    /** The name of the geo fence */
    public var name: String?
    /** A list of coordinates specifying the geofence region */
    public var fenceCoordinates: [BasicCoordinate]?
    /** The job code to be used when the person enters/leaves the geofence */
    public var triggerJobCodeId: Int?
    /** The task to be used when the person enters/leaves the geofence */
    public var triggerTaskId: Int?
    /** Send an alert to a user, specified by their user ID */
    public var sendAlertToOrgGroupId: Int?
    /** Define when you want the alerts to be sent */
    public var alertSettings: AlertSettings?
    /** Define how to you want to trigger the timesheet automation */
    public var triggerSettings: TriggerSettings?
    /** The start hour in which this geofence should apply.  After this time, the geofence will be active. */
    public var startTimeHour: Int?
    /** The start minute in which this geofence should apply.  After this time, the geofence will be active. */
    public var startTimeMinute: Int?
    /** The end hour in which this geofence will stop applying.  After this time, the geofence will be inactive. */
    public var endTimeHour: Int?
    /** The end minute in which this geofence will stop applying.  After this time, the geofence will be inactive. */
    public var endTimeMinute: Int?

    public init(geofenceId: Int?, name: String?, fenceCoordinates: [BasicCoordinate]?, triggerJobCodeId: Int?, triggerTaskId: Int?, sendAlertToOrgGroupId: Int?, alertSettings: AlertSettings?, triggerSettings: TriggerSettings?, startTimeHour: Int?, startTimeMinute: Int?, endTimeHour: Int?, endTimeMinute: Int?) {
        self.geofenceId = geofenceId
        self.name = name
        self.fenceCoordinates = fenceCoordinates
        self.triggerJobCodeId = triggerJobCodeId
        self.triggerTaskId = triggerTaskId
        self.sendAlertToOrgGroupId = sendAlertToOrgGroupId
        self.alertSettings = alertSettings
        self.triggerSettings = triggerSettings
        self.startTimeHour = startTimeHour
        self.startTimeMinute = startTimeMinute
        self.endTimeHour = endTimeHour
        self.endTimeMinute = endTimeMinute
    }

    public enum CodingKeys: String, CodingKey { 
        case geofenceId = "GeofenceId"
        case name = "Name"
        case fenceCoordinates = "FenceCoordinates"
        case triggerJobCodeId = "TriggerJobCodeId"
        case triggerTaskId = "TriggerTaskId"
        case sendAlertToOrgGroupId = "SendAlertToOrgGroupId"
        case alertSettings = "AlertSettings"
        case triggerSettings = "TriggerSettings"
        case startTimeHour = "StartTimeHour"
        case startTimeMinute = "StartTimeMinute"
        case endTimeHour = "EndTimeHour"
        case endTimeMinute = "EndTimeMinute"
    }

}
