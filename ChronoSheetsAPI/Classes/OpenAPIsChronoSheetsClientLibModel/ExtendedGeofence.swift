//
// ExtendedGeofence.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** An extended geofence record */
public struct ExtendedGeofence: Codable { 


    public enum TriggerSettings: String, Codable {
        case _none = "None"
        case startTimesheetWhenEntering = "StartTimesheetWhenEntering"
        case stopTimesheetWhenEntering = "StopTimesheetWhenEntering"
        case startOnEnterStopOnLeave = "StartOnEnterStopOnLeave"
    }
    public enum AlertSettings: String, Codable {
        case _none = "None"
        case sendWhenEntering = "SendWhenEntering"
        case sendWhenExiting = "SendWhenExiting"
        case sendWhenEnteringOrExiting = "SendWhenEnteringOrExiting"
    }
    /** The Job code used when the employee enters/exits the geofence */
    public var jobCode: String?
    /** The name of the task used when the employee enters/exits the geofence */
    public var taskName: String?
    /** The name of the employee who created the geofence */
    public var createdBy: String?
    /** The name of the employee who last updated the geofence */
    public var updatedBy: String?
    /** The name of the organisation group who will be notified when the geofence is triggered */
    public var alertOrganisation: String?
    /** The ID of the geofence */
    public var geoFencingId: Int?
    /** The ID of the organisation owning the geofence record */
    public var orgId: Int?
    /** The ID of the user/employee who created the geofence */
    public var createdByUserId: Int?
    /** The ID of the user/employee who last updated the geofence */
    public var lastUpdatedByUserId: Int?
    /** A descriptive name of the geofence */
    public var name: String?
    /** The name of the approx. location of the geofence */
    public var locationName: String?
    /** A list of co-ordinates specifying the geofence */
    public var coordinates: [BasicCoordinate]?
    /** The date and time the geofence was created.  Time is in UTC. */
    public var createdAt: Date?
    /** The date and time the geofence was updated last.  Time is in UTC. */
    public var updatedAt: Date?
    /** The ID of the job code used when the employee enters/exits the geofence */
    public var triggerJobCodeId: Int?
    /** The ID of the task used when the employee enters/exits the geofence */
    public var triggerTaskId: Int?
    /** The settings for triggering actions */
    public var triggerSettings: TriggerSettings?
    /** The organisation group that will be notified when the geofence is triggered */
    public var alertToOrgGroupId: Int?
    /** The settings for trigger alerts */
    public var alertSettings: AlertSettings?
    /** The hour start time. E.g. 13 would be 1pm.  Time is in 24hr format. */
    public var startTimeHour: Int?
    /** The minute start time.  E.g. 46 would be the 46th minute of the hour. */
    public var startTimeMinute: Int?
    /** The hour end time. E.g. 21 would be 9pm.  Time is in 24hr format. */
    public var endTimeHour: Int?
    /** The minute end time.  E.g. 13 would be the 13th minute of the hour. */
    public var endTimeMinute: Int?

    public init(jobCode: String?, taskName: String?, createdBy: String?, updatedBy: String?, alertOrganisation: String?, geoFencingId: Int?, orgId: Int?, createdByUserId: Int?, lastUpdatedByUserId: Int?, name: String?, locationName: String?, coordinates: [BasicCoordinate]?, createdAt: Date?, updatedAt: Date?, triggerJobCodeId: Int?, triggerTaskId: Int?, triggerSettings: TriggerSettings?, alertToOrgGroupId: Int?, alertSettings: AlertSettings?, startTimeHour: Int?, startTimeMinute: Int?, endTimeHour: Int?, endTimeMinute: Int?) {
        self.jobCode = jobCode
        self.taskName = taskName
        self.createdBy = createdBy
        self.updatedBy = updatedBy
        self.alertOrganisation = alertOrganisation
        self.geoFencingId = geoFencingId
        self.orgId = orgId
        self.createdByUserId = createdByUserId
        self.lastUpdatedByUserId = lastUpdatedByUserId
        self.name = name
        self.locationName = locationName
        self.coordinates = coordinates
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.triggerJobCodeId = triggerJobCodeId
        self.triggerTaskId = triggerTaskId
        self.triggerSettings = triggerSettings
        self.alertToOrgGroupId = alertToOrgGroupId
        self.alertSettings = alertSettings
        self.startTimeHour = startTimeHour
        self.startTimeMinute = startTimeMinute
        self.endTimeHour = endTimeHour
        self.endTimeMinute = endTimeMinute
    }

    public enum CodingKeys: String, CodingKey { 
        case jobCode = "JobCode"
        case taskName = "TaskName"
        case createdBy = "CreatedBy"
        case updatedBy = "UpdatedBy"
        case alertOrganisation = "AlertOrganisation"
        case geoFencingId = "GeoFencingId"
        case orgId = "OrgId"
        case createdByUserId = "CreatedByUserId"
        case lastUpdatedByUserId = "LastUpdatedByUserId"
        case name = "Name"
        case locationName = "LocationName"
        case coordinates = "Coordinates"
        case createdAt = "CreatedAt"
        case updatedAt = "UpdatedAt"
        case triggerJobCodeId = "TriggerJobCodeId"
        case triggerTaskId = "TriggerTaskId"
        case triggerSettings = "TriggerSettings"
        case alertToOrgGroupId = "AlertToOrgGroupId"
        case alertSettings = "AlertSettings"
        case startTimeHour = "StartTimeHour"
        case startTimeMinute = "StartTimeMinute"
        case endTimeHour = "EndTimeHour"
        case endTimeMinute = "EndTimeMinute"
    }

}
