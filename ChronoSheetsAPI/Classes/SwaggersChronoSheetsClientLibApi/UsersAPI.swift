//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UsersAPI {
    /**
     Create a user account in your organisation.  Requires the 'ManageOrganisationUsers' permission.
     
     - parameter request: (body) An Insert User Request object containing values for the new User to create 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersCreateTimesheetUser(request: CSInsertUserRequest, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseInsertUserResponse?,_ error: Error?) -> Void)) {
        usersCreateTimesheetUserWithRequestBuilder(request: request, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a user account in your organisation.  Requires the 'ManageOrganisationUsers' permission.
     - POST /api/Users/CreateTimesheetUser
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "ValidationErrors" : [ "ValidationErrors", "ValidationErrors" ],
    "UserId" : 6,
    "OrganisationId" : 0
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "ValidationErrors" : [ "ValidationErrors", "ValidationErrors" ],
    "UserId" : 6,
    "OrganisationId" : 0
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter request: (body) An Insert User Request object containing values for the new User to create 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseInsertUserResponse> 
     */
    open class func usersCreateTimesheetUserWithRequestBuilder(request: CSInsertUserRequest, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseInsertUserResponse> {
        let path = "/api/Users/CreateTimesheetUser"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseInsertUserResponse>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Get a particular user in your organisation.  Requires the 'ManageOrganisationUsers' or 'ManageOrganisationGroups' permissions.
     
     - parameter userId: (query) The User ID of the UserForManagement you want to get 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersGetTimesheetUser(userId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseUserForManagement?,_ error: Error?) -> Void)) {
        usersGetTimesheetUserWithRequestBuilder(userId: userId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a particular user in your organisation.  Requires the 'ManageOrganisationUsers' or 'ManageOrganisationGroups' permissions.
     - GET /api/Users/GetTimesheetUser
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "IsPrimaryAccount" : true,
    "UserName" : "UserName",
    "Organisation" : {
      "Timezone" : "Timezone",
      "Suburb" : "Suburb",
      "SubscriptionSource" : "None",
      "IsActive" : true,
      "SubscriptionCustomerId" : "SubscriptionCustomerId",
      "SubscriptionCycleStart" : "2000-01-23T04:56:07.000+00:00",
      "StripeCouponCode" : "StripeCouponCode",
      "Postcode" : "Postcode",
      "EmailAddress" : "EmailAddress",
      "Name" : "Name",
      "PricingPlans" : [ {
        "PlanId" : "PlanId",
        "Quantity" : 6
      }, {
        "PlanId" : "PlanId",
        "Quantity" : 6
      } ],
      "MobileSignUpCode" : "MobileSignUpCode",
      "State" : "State",
      "Phone" : "Phone",
      "SubscriptionCycleEnd" : "2000-01-23T04:56:07.000+00:00",
      "AddressLine02" : "AddressLine02",
      "Country" : "Country",
      "Id" : 0,
      "AddressLine01" : "AddressLine01",
      "SignupToken" : "SignupToken",
      "SignUpSource" : "Desktop"
    },
    "FirstName" : "FirstName",
    "OrganisationId" : 6,
    "Roles" : 1,
    "IsAccountActive" : true,
    "EmailAddress" : "EmailAddress",
    "SetupWizardRequired" : true,
    "IsSubscribedToNewsletter" : true,
    "Id" : 0,
    "LastName" : "LastName",
    "AlertSettings" : 5
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "IsPrimaryAccount" : true,
    "UserName" : "UserName",
    "Organisation" : {
      "Timezone" : "Timezone",
      "Suburb" : "Suburb",
      "SubscriptionSource" : "None",
      "IsActive" : true,
      "SubscriptionCustomerId" : "SubscriptionCustomerId",
      "SubscriptionCycleStart" : "2000-01-23T04:56:07.000+00:00",
      "StripeCouponCode" : "StripeCouponCode",
      "Postcode" : "Postcode",
      "EmailAddress" : "EmailAddress",
      "Name" : "Name",
      "PricingPlans" : [ {
        "PlanId" : "PlanId",
        "Quantity" : 6
      }, {
        "PlanId" : "PlanId",
        "Quantity" : 6
      } ],
      "MobileSignUpCode" : "MobileSignUpCode",
      "State" : "State",
      "Phone" : "Phone",
      "SubscriptionCycleEnd" : "2000-01-23T04:56:07.000+00:00",
      "AddressLine02" : "AddressLine02",
      "Country" : "Country",
      "Id" : 0,
      "AddressLine01" : "AddressLine01",
      "SignupToken" : "SignupToken",
      "SignUpSource" : "Desktop"
    },
    "FirstName" : "FirstName",
    "OrganisationId" : 6,
    "Roles" : 1,
    "IsAccountActive" : true,
    "EmailAddress" : "EmailAddress",
    "SetupWizardRequired" : true,
    "IsSubscribedToNewsletter" : true,
    "Id" : 0,
    "LastName" : "LastName",
    "AlertSettings" : 5
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter userId: (query) The User ID of the UserForManagement you want to get 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseUserForManagement> 
     */
    open class func usersGetTimesheetUserWithRequestBuilder(userId: Int, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseUserForManagement> {
        let path = "/api/Users/GetTimesheetUser"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": userId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseUserForManagement>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get users accounts in your organisation.  Requires the 'ManageOrganisationUsers' or 'ManageOrganisationGroups' permissions.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersGetTimesheetUsers(xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseListUserForManagement?,_ error: Error?) -> Void)) {
        usersGetTimesheetUsersWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get users accounts in your organisation.  Requires the 'ManageOrganisationUsers' or 'ManageOrganisationGroups' permissions.
     - GET /api/Users/GetTimesheetUsers
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ {
    "IsPrimaryAccount" : true,
    "UserName" : "UserName",
    "Organisation" : {
      "Timezone" : "Timezone",
      "Suburb" : "Suburb",
      "SubscriptionSource" : "None",
      "IsActive" : true,
      "SubscriptionCustomerId" : "SubscriptionCustomerId",
      "SubscriptionCycleStart" : "2000-01-23T04:56:07.000+00:00",
      "StripeCouponCode" : "StripeCouponCode",
      "Postcode" : "Postcode",
      "EmailAddress" : "EmailAddress",
      "Name" : "Name",
      "PricingPlans" : [ {
        "PlanId" : "PlanId",
        "Quantity" : 6
      }, {
        "PlanId" : "PlanId",
        "Quantity" : 6
      } ],
      "MobileSignUpCode" : "MobileSignUpCode",
      "State" : "State",
      "Phone" : "Phone",
      "SubscriptionCycleEnd" : "2000-01-23T04:56:07.000+00:00",
      "AddressLine02" : "AddressLine02",
      "Country" : "Country",
      "Id" : 0,
      "AddressLine01" : "AddressLine01",
      "SignupToken" : "SignupToken",
      "SignUpSource" : "Desktop"
    },
    "FirstName" : "FirstName",
    "OrganisationId" : 6,
    "Roles" : 1,
    "IsAccountActive" : true,
    "EmailAddress" : "EmailAddress",
    "SetupWizardRequired" : true,
    "IsSubscribedToNewsletter" : true,
    "Id" : 0,
    "LastName" : "LastName",
    "AlertSettings" : 5
  }, {
    "IsPrimaryAccount" : true,
    "UserName" : "UserName",
    "Organisation" : {
      "Timezone" : "Timezone",
      "Suburb" : "Suburb",
      "SubscriptionSource" : "None",
      "IsActive" : true,
      "SubscriptionCustomerId" : "SubscriptionCustomerId",
      "SubscriptionCycleStart" : "2000-01-23T04:56:07.000+00:00",
      "StripeCouponCode" : "StripeCouponCode",
      "Postcode" : "Postcode",
      "EmailAddress" : "EmailAddress",
      "Name" : "Name",
      "PricingPlans" : [ {
        "PlanId" : "PlanId",
        "Quantity" : 6
      }, {
        "PlanId" : "PlanId",
        "Quantity" : 6
      } ],
      "MobileSignUpCode" : "MobileSignUpCode",
      "State" : "State",
      "Phone" : "Phone",
      "SubscriptionCycleEnd" : "2000-01-23T04:56:07.000+00:00",
      "AddressLine02" : "AddressLine02",
      "Country" : "Country",
      "Id" : 0,
      "AddressLine01" : "AddressLine01",
      "SignupToken" : "SignupToken",
      "SignUpSource" : "Desktop"
    },
    "FirstName" : "FirstName",
    "OrganisationId" : 6,
    "Roles" : 1,
    "IsAccountActive" : true,
    "EmailAddress" : "EmailAddress",
    "SetupWizardRequired" : true,
    "IsSubscribedToNewsletter" : true,
    "Id" : 0,
    "LastName" : "LastName",
    "AlertSettings" : 5
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ {
    "IsPrimaryAccount" : true,
    "UserName" : "UserName",
    "Organisation" : {
      "Timezone" : "Timezone",
      "Suburb" : "Suburb",
      "SubscriptionSource" : "None",
      "IsActive" : true,
      "SubscriptionCustomerId" : "SubscriptionCustomerId",
      "SubscriptionCycleStart" : "2000-01-23T04:56:07.000+00:00",
      "StripeCouponCode" : "StripeCouponCode",
      "Postcode" : "Postcode",
      "EmailAddress" : "EmailAddress",
      "Name" : "Name",
      "PricingPlans" : [ {
        "PlanId" : "PlanId",
        "Quantity" : 6
      }, {
        "PlanId" : "PlanId",
        "Quantity" : 6
      } ],
      "MobileSignUpCode" : "MobileSignUpCode",
      "State" : "State",
      "Phone" : "Phone",
      "SubscriptionCycleEnd" : "2000-01-23T04:56:07.000+00:00",
      "AddressLine02" : "AddressLine02",
      "Country" : "Country",
      "Id" : 0,
      "AddressLine01" : "AddressLine01",
      "SignupToken" : "SignupToken",
      "SignUpSource" : "Desktop"
    },
    "FirstName" : "FirstName",
    "OrganisationId" : 6,
    "Roles" : 1,
    "IsAccountActive" : true,
    "EmailAddress" : "EmailAddress",
    "SetupWizardRequired" : true,
    "IsSubscribedToNewsletter" : true,
    "Id" : 0,
    "LastName" : "LastName",
    "AlertSettings" : 5
  }, {
    "IsPrimaryAccount" : true,
    "UserName" : "UserName",
    "Organisation" : {
      "Timezone" : "Timezone",
      "Suburb" : "Suburb",
      "SubscriptionSource" : "None",
      "IsActive" : true,
      "SubscriptionCustomerId" : "SubscriptionCustomerId",
      "SubscriptionCycleStart" : "2000-01-23T04:56:07.000+00:00",
      "StripeCouponCode" : "StripeCouponCode",
      "Postcode" : "Postcode",
      "EmailAddress" : "EmailAddress",
      "Name" : "Name",
      "PricingPlans" : [ {
        "PlanId" : "PlanId",
        "Quantity" : 6
      }, {
        "PlanId" : "PlanId",
        "Quantity" : 6
      } ],
      "MobileSignUpCode" : "MobileSignUpCode",
      "State" : "State",
      "Phone" : "Phone",
      "SubscriptionCycleEnd" : "2000-01-23T04:56:07.000+00:00",
      "AddressLine02" : "AddressLine02",
      "Country" : "Country",
      "Id" : 0,
      "AddressLine01" : "AddressLine01",
      "SignupToken" : "SignupToken",
      "SignUpSource" : "Desktop"
    },
    "FirstName" : "FirstName",
    "OrganisationId" : 6,
    "Roles" : 1,
    "IsAccountActive" : true,
    "EmailAddress" : "EmailAddress",
    "SetupWizardRequired" : true,
    "IsSubscribedToNewsletter" : true,
    "Id" : 0,
    "LastName" : "LastName",
    "AlertSettings" : 5
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseListUserForManagement> 
     */
    open class func usersGetTimesheetUsersWithRequestBuilder(xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseListUserForManagement> {
        let path = "/api/Users/GetTimesheetUsers"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseListUserForManagement>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update a user account.  Requires the 'ManageOrganisationUsers' permission.
     
     - parameter request: (body) A Update User Request object containing updated fields.  Make sure to specify the User Id in the request object so that ChronoSheets knows which User to update 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUpdateTimesheetUser(request: CSUpdateUserRequest, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseUpdateUserResponse?,_ error: Error?) -> Void)) {
        usersUpdateTimesheetUserWithRequestBuilder(request: request, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a user account.  Requires the 'ManageOrganisationUsers' permission.
     - PUT /api/Users/UpdateTimesheetUser
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "ValidationErrors" : [ "ValidationErrors", "ValidationErrors" ],
    "UserId" : 6,
    "OrganisationId" : 0
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "ValidationErrors" : [ "ValidationErrors", "ValidationErrors" ],
    "UserId" : 6,
    "OrganisationId" : 0
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter request: (body) A Update User Request object containing updated fields.  Make sure to specify the User Id in the request object so that ChronoSheets knows which User to update 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseUpdateUserResponse> 
     */
    open class func usersUpdateTimesheetUserWithRequestBuilder(request: CSUpdateUserRequest, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseUpdateUserResponse> {
        let path = "/api/Users/UpdateTimesheetUser"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseUpdateUserResponse>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
