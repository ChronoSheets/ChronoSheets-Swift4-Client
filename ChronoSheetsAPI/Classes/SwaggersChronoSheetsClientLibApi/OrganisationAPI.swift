//
// OrganisationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class OrganisationAPI {
    /**
     Get your organisation.    Requires 'OrganisationAdmin' permission.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organisationGetOrganisation(xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseOrganisation?,_ error: Error?) -> Void)) {
        organisationGetOrganisationWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your organisation.    Requires 'OrganisationAdmin' permission.
     - GET /api/Organisation/GetOrganisation
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "Timezone" : "Timezone",
    "Suburb" : "Suburb",
    "SubscriptionSource" : "None",
    "IsActive" : true,
    "SubscriptionCustomerId" : "SubscriptionCustomerId",
    "SubscriptionCycleStart" : "2000-01-23T04:56:07.000+00:00",
    "StripeCouponCode" : "StripeCouponCode",
    "Postcode" : "Postcode",
    "EmailAddress" : "EmailAddress",
    "Name" : "Name",
    "PricingPlans" : [ {
      "PlanId" : "PlanId",
      "Quantity" : 6
    }, {
      "PlanId" : "PlanId",
      "Quantity" : 6
    } ],
    "MobileSignUpCode" : "MobileSignUpCode",
    "State" : "State",
    "Phone" : "Phone",
    "SubscriptionCycleEnd" : "2000-01-23T04:56:07.000+00:00",
    "AddressLine02" : "AddressLine02",
    "Country" : "Country",
    "Id" : 0,
    "AddressLine01" : "AddressLine01",
    "SignupToken" : "SignupToken",
    "SignUpSource" : "Desktop"
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "Timezone" : "Timezone",
    "Suburb" : "Suburb",
    "SubscriptionSource" : "None",
    "IsActive" : true,
    "SubscriptionCustomerId" : "SubscriptionCustomerId",
    "SubscriptionCycleStart" : "2000-01-23T04:56:07.000+00:00",
    "StripeCouponCode" : "StripeCouponCode",
    "Postcode" : "Postcode",
    "EmailAddress" : "EmailAddress",
    "Name" : "Name",
    "PricingPlans" : [ {
      "PlanId" : "PlanId",
      "Quantity" : 6
    }, {
      "PlanId" : "PlanId",
      "Quantity" : 6
    } ],
    "MobileSignUpCode" : "MobileSignUpCode",
    "State" : "State",
    "Phone" : "Phone",
    "SubscriptionCycleEnd" : "2000-01-23T04:56:07.000+00:00",
    "AddressLine02" : "AddressLine02",
    "Country" : "Country",
    "Id" : 0,
    "AddressLine01" : "AddressLine01",
    "SignupToken" : "SignupToken",
    "SignUpSource" : "Desktop"
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseOrganisation> 
     */
    open class func organisationGetOrganisationWithRequestBuilder(xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseOrganisation> {
        let path = "/api/Organisation/GetOrganisation"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseOrganisation>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update an organisation.    Requires 'OrganisationAdmin' permission.
     
     - parameter request: (body) An Update Organsation Request object containing updated fields.  Make sure to specify the Organsation Id in the request object so that ChronoSheets knows which Organsation to update 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func organisationUpdateOrganisation(request: CSUpdateOrganisationRequest, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseUpdateOrganisationResponse?,_ error: Error?) -> Void)) {
        organisationUpdateOrganisationWithRequestBuilder(request: request, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update an organisation.    Requires 'OrganisationAdmin' permission.
     - PUT /api/Organisation/UpdateOrganisation
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "ValidationErrors" : [ "ValidationErrors", "ValidationErrors" ]
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "ValidationErrors" : [ "ValidationErrors", "ValidationErrors" ]
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter request: (body) An Update Organsation Request object containing updated fields.  Make sure to specify the Organsation Id in the request object so that ChronoSheets knows which Organsation to update 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseUpdateOrganisationResponse> 
     */
    open class func organisationUpdateOrganisationWithRequestBuilder(request: CSUpdateOrganisationRequest, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseUpdateOrganisationResponse> {
        let path = "/api/Organisation/UpdateOrganisation"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseUpdateOrganisationResponse>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
