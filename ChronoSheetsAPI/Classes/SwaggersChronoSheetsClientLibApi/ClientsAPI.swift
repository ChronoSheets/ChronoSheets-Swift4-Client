//
// ClientsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ClientsAPI {
    /**
     Create a client.    Requires the 'ManageClientsAndProjects' permission.
     
     - parameter request: (body) An Insert Client Request object containing values for the new Client to create 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientsCreateClient(request: CSInsertClientRequest, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseInt32?,_ error: Error?) -> Void)) {
        clientsCreateClientWithRequestBuilder(request: request, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a client.    Requires the 'ManageClientsAndProjects' permission.
     - POST /Clients/CreateClient
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : 0
}}, {contentType=application/xml, example=<null>
  <Data>123</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : 0
}}, {contentType=application/xml, example=<null>
  <Data>123</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter request: (body) An Insert Client Request object containing values for the new Client to create 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseInt32> 
     */
    open class func clientsCreateClientWithRequestBuilder(request: CSInsertClientRequest, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseInt32> {
        let path = "/Clients/CreateClient"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseInt32>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Get a particular client.    Requires the 'ManageClientsAndProjects' or 'ManageJobsAndTask' permissions.
     
     - parameter clientId: (query) The ID of the Client you want to get 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientsGetClient(clientId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseClient?,_ error: Error?) -> Void)) {
        clientsGetClientWithRequestBuilder(clientId: clientId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a particular client.    Requires the 'ManageClientsAndProjects' or 'ManageJobsAndTask' permissions.
     - GET /Clients/GetClient
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "ClientState" : "ClientState",
    "PersonOfContact" : "PersonOfContact",
    "OrganisationId" : 6,
    "ProjectCount" : 1,
    "ClientName" : "ClientName",
    "ClientPostCode" : "ClientPostCode",
    "ClientAddressLine2" : "ClientAddressLine2",
    "ClientAddressLine1" : "ClientAddressLine1",
    "ClientMobileNumber" : "ClientMobileNumber",
    "ClientWebURL" : "ClientWebURL",
    "Id" : 0,
    "ClientPhoneNumber" : "ClientPhoneNumber",
    "ClientEmailAddress" : "ClientEmailAddress",
    "ClientSuburb" : "ClientSuburb"
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "ClientState" : "ClientState",
    "PersonOfContact" : "PersonOfContact",
    "OrganisationId" : 6,
    "ProjectCount" : 1,
    "ClientName" : "ClientName",
    "ClientPostCode" : "ClientPostCode",
    "ClientAddressLine2" : "ClientAddressLine2",
    "ClientAddressLine1" : "ClientAddressLine1",
    "ClientMobileNumber" : "ClientMobileNumber",
    "ClientWebURL" : "ClientWebURL",
    "Id" : 0,
    "ClientPhoneNumber" : "ClientPhoneNumber",
    "ClientEmailAddress" : "ClientEmailAddress",
    "ClientSuburb" : "ClientSuburb"
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter clientId: (query) The ID of the Client you want to get 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseClient> 
     */
    open class func clientsGetClientWithRequestBuilder(clientId: Int, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseClient> {
        let path = "/Clients/GetClient"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ClientId": clientId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseClient>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get a collection of clients that are under your organisation.    Requires the 'ManageClientsAndProjects' or 'ManageJobsAndTask' permissions.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientsGetClients(xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseListClient?,_ error: Error?) -> Void)) {
        clientsGetClientsWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a collection of clients that are under your organisation.    Requires the 'ManageClientsAndProjects' or 'ManageJobsAndTask' permissions.
     - GET /Clients/GetClients
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ {
    "ClientState" : "ClientState",
    "PersonOfContact" : "PersonOfContact",
    "OrganisationId" : 6,
    "ProjectCount" : 1,
    "ClientName" : "ClientName",
    "ClientPostCode" : "ClientPostCode",
    "ClientAddressLine2" : "ClientAddressLine2",
    "ClientAddressLine1" : "ClientAddressLine1",
    "ClientMobileNumber" : "ClientMobileNumber",
    "ClientWebURL" : "ClientWebURL",
    "Id" : 0,
    "ClientPhoneNumber" : "ClientPhoneNumber",
    "ClientEmailAddress" : "ClientEmailAddress",
    "ClientSuburb" : "ClientSuburb"
  }, {
    "ClientState" : "ClientState",
    "PersonOfContact" : "PersonOfContact",
    "OrganisationId" : 6,
    "ProjectCount" : 1,
    "ClientName" : "ClientName",
    "ClientPostCode" : "ClientPostCode",
    "ClientAddressLine2" : "ClientAddressLine2",
    "ClientAddressLine1" : "ClientAddressLine1",
    "ClientMobileNumber" : "ClientMobileNumber",
    "ClientWebURL" : "ClientWebURL",
    "Id" : 0,
    "ClientPhoneNumber" : "ClientPhoneNumber",
    "ClientEmailAddress" : "ClientEmailAddress",
    "ClientSuburb" : "ClientSuburb"
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ {
    "ClientState" : "ClientState",
    "PersonOfContact" : "PersonOfContact",
    "OrganisationId" : 6,
    "ProjectCount" : 1,
    "ClientName" : "ClientName",
    "ClientPostCode" : "ClientPostCode",
    "ClientAddressLine2" : "ClientAddressLine2",
    "ClientAddressLine1" : "ClientAddressLine1",
    "ClientMobileNumber" : "ClientMobileNumber",
    "ClientWebURL" : "ClientWebURL",
    "Id" : 0,
    "ClientPhoneNumber" : "ClientPhoneNumber",
    "ClientEmailAddress" : "ClientEmailAddress",
    "ClientSuburb" : "ClientSuburb"
  }, {
    "ClientState" : "ClientState",
    "PersonOfContact" : "PersonOfContact",
    "OrganisationId" : 6,
    "ProjectCount" : 1,
    "ClientName" : "ClientName",
    "ClientPostCode" : "ClientPostCode",
    "ClientAddressLine2" : "ClientAddressLine2",
    "ClientAddressLine1" : "ClientAddressLine1",
    "ClientMobileNumber" : "ClientMobileNumber",
    "ClientWebURL" : "ClientWebURL",
    "Id" : 0,
    "ClientPhoneNumber" : "ClientPhoneNumber",
    "ClientEmailAddress" : "ClientEmailAddress",
    "ClientSuburb" : "ClientSuburb"
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseListClient> 
     */
    open class func clientsGetClientsWithRequestBuilder(xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseListClient> {
        let path = "/Clients/GetClients"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseListClient>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update a client.    Requires the 'ManageClientsAndProjects' permission.
     
     - parameter request: (body) A Save Client Request object containing updated fields.  Make sure to specify the Client Id in the request object so that ChronoSheets knows which Client to update 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientsUpdateClient(request: CSSaveClientRequest, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseBoolean?,_ error: Error?) -> Void)) {
        clientsUpdateClientWithRequestBuilder(request: request, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a client.    Requires the 'ManageClientsAndProjects' permission.
     - PUT /Clients/UpdateClient
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : true
}}, {contentType=application/xml, example=<null>
  <Data>true</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : true
}}, {contentType=application/xml, example=<null>
  <Data>true</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter request: (body) A Save Client Request object containing updated fields.  Make sure to specify the Client Id in the request object so that ChronoSheets knows which Client to update 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseBoolean> 
     */
    open class func clientsUpdateClientWithRequestBuilder(request: CSSaveClientRequest, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseBoolean> {
        let path = "/Clients/UpdateClient"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseBoolean>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
