//
// GeoFencingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class GeoFencingAPI {
    /**
     Create a geofencing with rules to be used for clock on/off automation.  Requires the 'ManageGeofencing' permission.
     
     - parameter request: (body)  
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func geoFencingCreateGeofence(request: CSCreateGeoFenceRequest, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseInt32?,_ error: Error?) -> Void)) {
        geoFencingCreateGeofenceWithRequestBuilder(request: request, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a geofencing with rules to be used for clock on/off automation.  Requires the 'ManageGeofencing' permission.
     - POST /GeoFencing/CreateGeofence
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : 0
}}, {contentType=application/xml, example=<null>
  <Data>123</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : 0
}}, {contentType=application/xml, example=<null>
  <Data>123</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter request: (body)  
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseInt32> 
     */
    open class func geoFencingCreateGeofenceWithRequestBuilder(request: CSCreateGeoFenceRequest, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseInt32> {
        let path = "/GeoFencing/CreateGeofence"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseInt32>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Deletes a geofence.  Requires the 'ManageGeofencing' permission.
     
     - parameter geofenceId: (query) Specify the geofence you want to delete with the geofence ID. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func geoFencingDeleteGeofence(geofenceId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseGeofence?,_ error: Error?) -> Void)) {
        geoFencingDeleteGeofenceWithRequestBuilder(geofenceId: geofenceId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deletes a geofence.  Requires the 'ManageGeofencing' permission.
     - DELETE /GeoFencing/DeleteGeofence
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "EndTimeMinute" : 1,
    "GeoFencingId" : 0,
    "TriggerTaskId" : 9,
    "StartTimeMinute" : 4,
    "Coordinates" : [ {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    }, {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    } ],
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "StartTimeHour" : 2,
    "AlertToOrgGroupId" : 3,
    "LastUpdatedByUserId" : 5,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Name" : "Name",
    "LocationName" : "LocationName",
    "OrgId" : 6,
    "CreatedByUserId" : 1,
    "TriggerSettings" : "None",
    "TriggerJobCodeId" : 7,
    "AlertSettings" : "None",
    "EndTimeHour" : 7
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "EndTimeMinute" : 1,
    "GeoFencingId" : 0,
    "TriggerTaskId" : 9,
    "StartTimeMinute" : 4,
    "Coordinates" : [ {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    }, {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    } ],
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "StartTimeHour" : 2,
    "AlertToOrgGroupId" : 3,
    "LastUpdatedByUserId" : 5,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Name" : "Name",
    "LocationName" : "LocationName",
    "OrgId" : 6,
    "CreatedByUserId" : 1,
    "TriggerSettings" : "None",
    "TriggerJobCodeId" : 7,
    "AlertSettings" : "None",
    "EndTimeHour" : 7
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter geofenceId: (query) Specify the geofence you want to delete with the geofence ID. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseGeofence> 
     */
    open class func geoFencingDeleteGeofenceWithRequestBuilder(geofenceId: Int, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseGeofence> {
        let path = "/GeoFencing/DeleteGeofence"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "GeofenceId": geofenceId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseGeofence>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get a geofence by ID  Requires the 'SubmitTimesheets' permission.
     
     - parameter geofenceId: (query) The ID of the geofence you want to obtain 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func geoFencingGetGeofenceById(geofenceId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseGeofence?,_ error: Error?) -> Void)) {
        geoFencingGetGeofenceByIdWithRequestBuilder(geofenceId: geofenceId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a geofence by ID  Requires the 'SubmitTimesheets' permission.
     - GET /GeoFencing/GetGeofenceById
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "EndTimeMinute" : 1,
    "GeoFencingId" : 0,
    "TriggerTaskId" : 9,
    "StartTimeMinute" : 4,
    "Coordinates" : [ {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    }, {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    } ],
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "StartTimeHour" : 2,
    "AlertToOrgGroupId" : 3,
    "LastUpdatedByUserId" : 5,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Name" : "Name",
    "LocationName" : "LocationName",
    "OrgId" : 6,
    "CreatedByUserId" : 1,
    "TriggerSettings" : "None",
    "TriggerJobCodeId" : 7,
    "AlertSettings" : "None",
    "EndTimeHour" : 7
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "EndTimeMinute" : 1,
    "GeoFencingId" : 0,
    "TriggerTaskId" : 9,
    "StartTimeMinute" : 4,
    "Coordinates" : [ {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    }, {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    } ],
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "StartTimeHour" : 2,
    "AlertToOrgGroupId" : 3,
    "LastUpdatedByUserId" : 5,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Name" : "Name",
    "LocationName" : "LocationName",
    "OrgId" : 6,
    "CreatedByUserId" : 1,
    "TriggerSettings" : "None",
    "TriggerJobCodeId" : 7,
    "AlertSettings" : "None",
    "EndTimeHour" : 7
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter geofenceId: (query) The ID of the geofence you want to obtain 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseGeofence> 
     */
    open class func geoFencingGetGeofenceByIdWithRequestBuilder(geofenceId: Int, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseGeofence> {
        let path = "/GeoFencing/GetGeofenceById"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "GeofenceId": geofenceId.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseGeofence>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get geofences belonging to your organisation  Requires the 'SubmitTimesheets' permission.
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Number of records to skip (optional)
     - parameter take: (query) Number of records to take (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func geoFencingGetGeofences(xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: CSApiResponseForPaginatedListExtendedGeofence?,_ error: Error?) -> Void)) {
        geoFencingGetGeofencesWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get geofences belonging to your organisation  Requires the 'SubmitTimesheets' permission.
     - GET /GeoFencing/GetGeofences
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "TotalSetCount" : 0,
  "Message" : "Message",
  "Data" : [ {
    "EndTimeMinute" : 7,
    "CreatedBy" : "CreatedBy",
    "GeoFencingId" : 6,
    "TriggerTaskId" : 7,
    "StartTimeMinute" : 2,
    "Coordinates" : [ {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    }, {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    } ],
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "StartTimeHour" : 3,
    "AlertToOrgGroupId" : 9,
    "AlertOrganisation" : "AlertOrganisation",
    "LastUpdatedByUserId" : 5,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Name" : "Name",
    "LocationName" : "LocationName",
    "UpdatedBy" : "UpdatedBy",
    "OrgId" : 1,
    "CreatedByUserId" : 5,
    "TaskName" : "TaskName",
    "JobCode" : "JobCode",
    "TriggerSettings" : "None",
    "TriggerJobCodeId" : 2,
    "AlertSettings" : "None",
    "EndTimeHour" : 4
  }, {
    "EndTimeMinute" : 7,
    "CreatedBy" : "CreatedBy",
    "GeoFencingId" : 6,
    "TriggerTaskId" : 7,
    "StartTimeMinute" : 2,
    "Coordinates" : [ {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    }, {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    } ],
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "StartTimeHour" : 3,
    "AlertToOrgGroupId" : 9,
    "AlertOrganisation" : "AlertOrganisation",
    "LastUpdatedByUserId" : 5,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Name" : "Name",
    "LocationName" : "LocationName",
    "UpdatedBy" : "UpdatedBy",
    "OrgId" : 1,
    "CreatedByUserId" : 5,
    "TaskName" : "TaskName",
    "JobCode" : "JobCode",
    "TriggerSettings" : "None",
    "TriggerJobCodeId" : 2,
    "AlertSettings" : "None",
    "EndTimeHour" : 4
  } ]
}}, {contentType=application/xml, example=<null>
  <TotalSetCount>123</TotalSetCount>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "TotalSetCount" : 0,
  "Message" : "Message",
  "Data" : [ {
    "EndTimeMinute" : 7,
    "CreatedBy" : "CreatedBy",
    "GeoFencingId" : 6,
    "TriggerTaskId" : 7,
    "StartTimeMinute" : 2,
    "Coordinates" : [ {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    }, {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    } ],
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "StartTimeHour" : 3,
    "AlertToOrgGroupId" : 9,
    "AlertOrganisation" : "AlertOrganisation",
    "LastUpdatedByUserId" : 5,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Name" : "Name",
    "LocationName" : "LocationName",
    "UpdatedBy" : "UpdatedBy",
    "OrgId" : 1,
    "CreatedByUserId" : 5,
    "TaskName" : "TaskName",
    "JobCode" : "JobCode",
    "TriggerSettings" : "None",
    "TriggerJobCodeId" : 2,
    "AlertSettings" : "None",
    "EndTimeHour" : 4
  }, {
    "EndTimeMinute" : 7,
    "CreatedBy" : "CreatedBy",
    "GeoFencingId" : 6,
    "TriggerTaskId" : 7,
    "StartTimeMinute" : 2,
    "Coordinates" : [ {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    }, {
      "Latitude" : 5.637376656633329,
      "Longitude" : 2.3021358869347655
    } ],
    "CreatedAt" : "2000-01-23T04:56:07.000+00:00",
    "StartTimeHour" : 3,
    "AlertToOrgGroupId" : 9,
    "AlertOrganisation" : "AlertOrganisation",
    "LastUpdatedByUserId" : 5,
    "UpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "Name" : "Name",
    "LocationName" : "LocationName",
    "UpdatedBy" : "UpdatedBy",
    "OrgId" : 1,
    "CreatedByUserId" : 5,
    "TaskName" : "TaskName",
    "JobCode" : "JobCode",
    "TriggerSettings" : "None",
    "TriggerJobCodeId" : 2,
    "AlertSettings" : "None",
    "EndTimeHour" : 4
  } ]
}}, {contentType=application/xml, example=<null>
  <TotalSetCount>123</TotalSetCount>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter skip: (query) Number of records to skip (optional)
     - parameter take: (query) Number of records to take (optional)

     - returns: RequestBuilder<CSApiResponseForPaginatedListExtendedGeofence> 
     */
    open class func geoFencingGetGeofencesWithRequestBuilder(xChronosheetsAuth: String, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<CSApiResponseForPaginatedListExtendedGeofence> {
        let path = "/GeoFencing/GetGeofences"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseForPaginatedListExtendedGeofence>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Updates a geofencing with rules to be used for clock on/off automation.  Requires the 'ManageGeofencing' permission.
     
     - parameter request: (body)  
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func geoFencingUpdateGeofence(request: CSUpdateGeoFenceRequest, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseInt32?,_ error: Error?) -> Void)) {
        geoFencingUpdateGeofenceWithRequestBuilder(request: request, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates a geofencing with rules to be used for clock on/off automation.  Requires the 'ManageGeofencing' permission.
     - PUT /GeoFencing/UpdateGeofence
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : 0
}}, {contentType=application/xml, example=<null>
  <Data>123</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : 0
}}, {contentType=application/xml, example=<null>
  <Data>123</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter request: (body)  
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseInt32> 
     */
    open class func geoFencingUpdateGeofenceWithRequestBuilder(request: CSUpdateGeoFenceRequest, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseInt32> {
        let path = "/GeoFencing/UpdateGeofence"
        let URLString = ChronoSheetsAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseInt32>.Type = ChronoSheetsAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
