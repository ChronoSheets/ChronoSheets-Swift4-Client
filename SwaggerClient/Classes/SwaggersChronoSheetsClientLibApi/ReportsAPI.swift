//
// ReportsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ReportsAPI {
    /**
     Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetAllChartsDataAdmin(startDate: Date, endDate: Date, userIds: String, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseCombinedReportsData?,_ error: Error?) -> Void)) {
        reportsGetAllChartsDataAdminWithRequestBuilder(startDate: startDate, endDate: endDate, userIds: userIds, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     - GET /api/Reports/GetAllChartsDataAdmin
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "TotalsProjects" : [ {
      "ProjectName" : "ProjectName",
      "UserId" : 9,
      "OrganisationId" : 5,
      "ProjectId" : 9,
      "SpanSeconds" : 6
    }, {
      "ProjectName" : "ProjectName",
      "UserId" : 9,
      "OrganisationId" : 5,
      "ProjectId" : 9,
      "SpanSeconds" : 6
    } ],
    "SeriesClients" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ClientId" : 1,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ClientId" : 1,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "SeriesTasks" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "TaskId" : 0,
      "TaskName" : "TaskName",
      "SpanSeconds" : 6,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "TaskId" : 0,
      "TaskName" : "TaskName",
      "SpanSeconds" : 6,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "SeriesJobCodes" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "ProjectId" : 1,
      "ClientId" : 6,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00",
      "JobId" : 0
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "ProjectId" : 1,
      "ClientId" : 6,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00",
      "JobId" : 0
    } ],
    "TotalsJobCodes" : [ {
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "OrganisationId" : 7,
      "ProjectId" : 2,
      "ClientId" : 3,
      "SpanSeconds" : 4,
      "JobId" : 9
    }, {
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "OrganisationId" : 7,
      "ProjectId" : 2,
      "ClientId" : 3,
      "SpanSeconds" : 4,
      "JobId" : 9
    } ],
    "TotalsClients" : [ {
      "ClientName" : "ClientName",
      "UserId" : 7,
      "OrganisationId" : 6,
      "ClientId" : 1,
      "SpanSeconds" : 4
    }, {
      "ClientName" : "ClientName",
      "UserId" : 7,
      "OrganisationId" : 6,
      "ClientId" : 1,
      "SpanSeconds" : 4
    } ],
    "SeriesProjects" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ProjectName" : "ProjectName",
      "ProjectId" : 5,
      "SpanSeconds" : 2,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ProjectName" : "ProjectName",
      "ProjectId" : 5,
      "SpanSeconds" : 2,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "TotalsTasks" : [ {
      "TaskId" : 1,
      "TaskName" : "TaskName",
      "UserId" : 1,
      "OrganisationId" : 7,
      "SpanSeconds" : 1
    }, {
      "TaskId" : 1,
      "TaskName" : "TaskName",
      "UserId" : 1,
      "OrganisationId" : 7,
      "SpanSeconds" : 1
    } ]
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "TotalsProjects" : [ {
      "ProjectName" : "ProjectName",
      "UserId" : 9,
      "OrganisationId" : 5,
      "ProjectId" : 9,
      "SpanSeconds" : 6
    }, {
      "ProjectName" : "ProjectName",
      "UserId" : 9,
      "OrganisationId" : 5,
      "ProjectId" : 9,
      "SpanSeconds" : 6
    } ],
    "SeriesClients" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ClientId" : 1,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ClientId" : 1,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "SeriesTasks" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "TaskId" : 0,
      "TaskName" : "TaskName",
      "SpanSeconds" : 6,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "TaskId" : 0,
      "TaskName" : "TaskName",
      "SpanSeconds" : 6,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "SeriesJobCodes" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "ProjectId" : 1,
      "ClientId" : 6,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00",
      "JobId" : 0
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "ProjectId" : 1,
      "ClientId" : 6,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00",
      "JobId" : 0
    } ],
    "TotalsJobCodes" : [ {
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "OrganisationId" : 7,
      "ProjectId" : 2,
      "ClientId" : 3,
      "SpanSeconds" : 4,
      "JobId" : 9
    }, {
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "OrganisationId" : 7,
      "ProjectId" : 2,
      "ClientId" : 3,
      "SpanSeconds" : 4,
      "JobId" : 9
    } ],
    "TotalsClients" : [ {
      "ClientName" : "ClientName",
      "UserId" : 7,
      "OrganisationId" : 6,
      "ClientId" : 1,
      "SpanSeconds" : 4
    }, {
      "ClientName" : "ClientName",
      "UserId" : 7,
      "OrganisationId" : 6,
      "ClientId" : 1,
      "SpanSeconds" : 4
    } ],
    "SeriesProjects" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ProjectName" : "ProjectName",
      "ProjectId" : 5,
      "SpanSeconds" : 2,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ProjectName" : "ProjectName",
      "ProjectId" : 5,
      "SpanSeconds" : 2,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "TotalsTasks" : [ {
      "TaskId" : 1,
      "TaskName" : "TaskName",
      "UserId" : 1,
      "OrganisationId" : 7,
      "SpanSeconds" : 1
    }, {
      "TaskId" : 1,
      "TaskName" : "TaskName",
      "UserId" : 1,
      "OrganisationId" : 7,
      "SpanSeconds" : 1
    } ]
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseCombinedReportsData> 
     */
    open class func reportsGetAllChartsDataAdminWithRequestBuilder(startDate: Date, endDate: Date, userIds: String, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseCombinedReportsData> {
        let path = "/api/Reports/GetAllChartsDataAdmin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "UserIds": userIds
        ])
        
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseCombinedReportsData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user's own reports.    Requires the 'ViewOwnReports' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetAllChartsDataUser(startDate: Date, endDate: Date, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseCombinedReportsData?,_ error: Error?) -> Void)) {
        reportsGetAllChartsDataUserWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user's own reports.    Requires the 'ViewOwnReports' permission.
     - GET /api/Reports/GetAllChartsDataUser
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "TotalsProjects" : [ {
      "ProjectName" : "ProjectName",
      "UserId" : 9,
      "OrganisationId" : 5,
      "ProjectId" : 9,
      "SpanSeconds" : 6
    }, {
      "ProjectName" : "ProjectName",
      "UserId" : 9,
      "OrganisationId" : 5,
      "ProjectId" : 9,
      "SpanSeconds" : 6
    } ],
    "SeriesClients" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ClientId" : 1,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ClientId" : 1,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "SeriesTasks" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "TaskId" : 0,
      "TaskName" : "TaskName",
      "SpanSeconds" : 6,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "TaskId" : 0,
      "TaskName" : "TaskName",
      "SpanSeconds" : 6,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "SeriesJobCodes" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "ProjectId" : 1,
      "ClientId" : 6,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00",
      "JobId" : 0
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "ProjectId" : 1,
      "ClientId" : 6,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00",
      "JobId" : 0
    } ],
    "TotalsJobCodes" : [ {
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "OrganisationId" : 7,
      "ProjectId" : 2,
      "ClientId" : 3,
      "SpanSeconds" : 4,
      "JobId" : 9
    }, {
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "OrganisationId" : 7,
      "ProjectId" : 2,
      "ClientId" : 3,
      "SpanSeconds" : 4,
      "JobId" : 9
    } ],
    "TotalsClients" : [ {
      "ClientName" : "ClientName",
      "UserId" : 7,
      "OrganisationId" : 6,
      "ClientId" : 1,
      "SpanSeconds" : 4
    }, {
      "ClientName" : "ClientName",
      "UserId" : 7,
      "OrganisationId" : 6,
      "ClientId" : 1,
      "SpanSeconds" : 4
    } ],
    "SeriesProjects" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ProjectName" : "ProjectName",
      "ProjectId" : 5,
      "SpanSeconds" : 2,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ProjectName" : "ProjectName",
      "ProjectId" : 5,
      "SpanSeconds" : 2,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "TotalsTasks" : [ {
      "TaskId" : 1,
      "TaskName" : "TaskName",
      "UserId" : 1,
      "OrganisationId" : 7,
      "SpanSeconds" : 1
    }, {
      "TaskId" : 1,
      "TaskName" : "TaskName",
      "UserId" : 1,
      "OrganisationId" : 7,
      "SpanSeconds" : 1
    } ]
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "TotalsProjects" : [ {
      "ProjectName" : "ProjectName",
      "UserId" : 9,
      "OrganisationId" : 5,
      "ProjectId" : 9,
      "SpanSeconds" : 6
    }, {
      "ProjectName" : "ProjectName",
      "UserId" : 9,
      "OrganisationId" : 5,
      "ProjectId" : 9,
      "SpanSeconds" : 6
    } ],
    "SeriesClients" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ClientId" : 1,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ClientId" : 1,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "SeriesTasks" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "TaskId" : 0,
      "TaskName" : "TaskName",
      "SpanSeconds" : 6,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "TaskId" : 0,
      "TaskName" : "TaskName",
      "SpanSeconds" : 6,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "SeriesJobCodes" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "ProjectId" : 1,
      "ClientId" : 6,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00",
      "JobId" : 0
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "ProjectId" : 1,
      "ClientId" : 6,
      "SpanSeconds" : 5,
      "EndDate" : "2000-01-23T04:56:07.000+00:00",
      "JobId" : 0
    } ],
    "TotalsJobCodes" : [ {
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "OrganisationId" : 7,
      "ProjectId" : 2,
      "ClientId" : 3,
      "SpanSeconds" : 4,
      "JobId" : 9
    }, {
      "ClientName" : "ClientName",
      "ProjectName" : "ProjectName",
      "JobCode" : "JobCode",
      "OrganisationId" : 7,
      "ProjectId" : 2,
      "ClientId" : 3,
      "SpanSeconds" : 4,
      "JobId" : 9
    } ],
    "TotalsClients" : [ {
      "ClientName" : "ClientName",
      "UserId" : 7,
      "OrganisationId" : 6,
      "ClientId" : 1,
      "SpanSeconds" : 4
    }, {
      "ClientName" : "ClientName",
      "UserId" : 7,
      "OrganisationId" : 6,
      "ClientId" : 1,
      "SpanSeconds" : 4
    } ],
    "SeriesProjects" : [ {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ProjectName" : "ProjectName",
      "ProjectId" : 5,
      "SpanSeconds" : 2,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "StartDate" : "2000-01-23T04:56:07.000+00:00",
      "ProjectName" : "ProjectName",
      "ProjectId" : 5,
      "SpanSeconds" : 2,
      "EndDate" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "TotalsTasks" : [ {
      "TaskId" : 1,
      "TaskName" : "TaskName",
      "UserId" : 1,
      "OrganisationId" : 7,
      "SpanSeconds" : 1
    }, {
      "TaskId" : 1,
      "TaskName" : "TaskName",
      "UserId" : 1,
      "OrganisationId" : 7,
      "SpanSeconds" : 1
    } ]
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseCombinedReportsData> 
     */
    open class func reportsGetAllChartsDataUserWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseCombinedReportsData> {
        let path = "/api/Reports/GetAllChartsDataUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseCombinedReportsData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetFleetSummaryAdmin(startDate: Date, endDate: Date, userIds: String, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseListFleetSummaryReportItem?,_ error: Error?) -> Void)) {
        reportsGetFleetSummaryAdminWithRequestBuilder(startDate: startDate, endDate: endDate, userIds: userIds, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the 'ReportAdmin' permission.
     - GET /api/Reports/GetFleetSummaryAdmin
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ {
    "IsDeleted" : true,
    "PermittedEmployees" : [ 9, 9 ],
    "OrganisationId" : 2,
    "Make" : "Make",
    "TotalRunningCostDollars" : 5.962133916683182,
    "TotalDistanceMetersFiltered" : 0.8008281904610115,
    "LicencePlateNumber" : "LicencePlateNumber",
    "Name" : "Name",
    "Year" : "Year",
    "Model" : "Model",
    "Id" : 5,
    "CostPerKilometer" : 7.061401241503109,
    "TotalDistanceMeters" : 6.027456183070403,
    "TotalRunningCostDollarsFiltered" : 1.4658129805029452
  }, {
    "IsDeleted" : true,
    "PermittedEmployees" : [ 9, 9 ],
    "OrganisationId" : 2,
    "Make" : "Make",
    "TotalRunningCostDollars" : 5.962133916683182,
    "TotalDistanceMetersFiltered" : 0.8008281904610115,
    "LicencePlateNumber" : "LicencePlateNumber",
    "Name" : "Name",
    "Year" : "Year",
    "Model" : "Model",
    "Id" : 5,
    "CostPerKilometer" : 7.061401241503109,
    "TotalDistanceMeters" : 6.027456183070403,
    "TotalRunningCostDollarsFiltered" : 1.4658129805029452
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ {
    "IsDeleted" : true,
    "PermittedEmployees" : [ 9, 9 ],
    "OrganisationId" : 2,
    "Make" : "Make",
    "TotalRunningCostDollars" : 5.962133916683182,
    "TotalDistanceMetersFiltered" : 0.8008281904610115,
    "LicencePlateNumber" : "LicencePlateNumber",
    "Name" : "Name",
    "Year" : "Year",
    "Model" : "Model",
    "Id" : 5,
    "CostPerKilometer" : 7.061401241503109,
    "TotalDistanceMeters" : 6.027456183070403,
    "TotalRunningCostDollarsFiltered" : 1.4658129805029452
  }, {
    "IsDeleted" : true,
    "PermittedEmployees" : [ 9, 9 ],
    "OrganisationId" : 2,
    "Make" : "Make",
    "TotalRunningCostDollars" : 5.962133916683182,
    "TotalDistanceMetersFiltered" : 0.8008281904610115,
    "LicencePlateNumber" : "LicencePlateNumber",
    "Name" : "Name",
    "Year" : "Year",
    "Model" : "Model",
    "Id" : 5,
    "CostPerKilometer" : 7.061401241503109,
    "TotalDistanceMeters" : 6.027456183070403,
    "TotalRunningCostDollarsFiltered" : 1.4658129805029452
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseListFleetSummaryReportItem> 
     */
    open class func reportsGetFleetSummaryAdminWithRequestBuilder(startDate: Date, endDate: Date, userIds: String, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseListFleetSummaryReportItem> {
        let path = "/api/Reports/GetFleetSummaryAdmin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "UserIds": userIds
        ])
        
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseListFleetSummaryReportItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get trip by Id, for reporting purposes.    Requires the 'ReportAdmin' permission.
     
     - parameter tripId: (query) The ID of the Trip you want to get 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetOrgTripById(tripId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseTrip?,_ error: Error?) -> Void)) {
        reportsGetOrgTripByIdWithRequestBuilder(tripId: tripId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get trip by Id, for reporting purposes.    Requires the 'ReportAdmin' permission.
     - GET /api/Reports/GetOrgTripById
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "EndAddress" : "EndAddress",
    "VehicleMake" : "VehicleMake",
    "TripTotalCost" : 7.061401241503109,
    "VehicleId" : 1,
    "VehicleName" : "VehicleName",
    "CacheExpiryDate" : "2000-01-23T04:56:07.000+00:00",
    "TimesheetId" : 6,
    "VehicleYear" : "VehicleYear",
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "StartAddress" : "StartAddress",
    "TripId" : 0,
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "OrgId" : 5,
    "MobilePlatform" : "Unknown",
    "VehicleModel" : "VehicleModel",
    "UserId" : 5,
    "TotalTripDistanceMeters" : 9.301444243932576,
    "PathCoordinates" : [ {
      "Latitude" : 2.027123023002322,
      "Longitude" : 4.145608029883936
    }, {
      "Latitude" : 2.027123023002322,
      "Longitude" : 4.145608029883936
    } ],
    "CostPerKilometer" : 2.3021358869347655
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : {
    "EndAddress" : "EndAddress",
    "VehicleMake" : "VehicleMake",
    "TripTotalCost" : 7.061401241503109,
    "VehicleId" : 1,
    "VehicleName" : "VehicleName",
    "CacheExpiryDate" : "2000-01-23T04:56:07.000+00:00",
    "TimesheetId" : 6,
    "VehicleYear" : "VehicleYear",
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "StartAddress" : "StartAddress",
    "TripId" : 0,
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "OrgId" : 5,
    "MobilePlatform" : "Unknown",
    "VehicleModel" : "VehicleModel",
    "UserId" : 5,
    "TotalTripDistanceMeters" : 9.301444243932576,
    "PathCoordinates" : [ {
      "Latitude" : 2.027123023002322,
      "Longitude" : 4.145608029883936
    }, {
      "Latitude" : 2.027123023002322,
      "Longitude" : 4.145608029883936
    } ],
    "CostPerKilometer" : 2.3021358869347655
  }
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter tripId: (query) The ID of the Trip you want to get 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseTrip> 
     */
    open class func reportsGetOrgTripByIdWithRequestBuilder(tripId: Int, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseTrip> {
        let path = "/api/Reports/GetOrgTripById"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "TripId": tripId.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseTrip>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter skip: (query) Skip this many items 
     - parameter take: (query) Take this many items 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetOrganisationTimesheetFileAttachments(startDate: Date, endDate: Date, skip: Int, take: Int, userIds: String, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment?,_ error: Error?) -> Void)) {
        reportsGetOrganisationTimesheetFileAttachmentsWithRequestBuilder(startDate: startDate, endDate: endDate, skip: skip, take: take, userIds: userIds, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the 'ReportAdmin' permission.
     - GET /api/Reports/GetOrganisationTimesheetFileAttachments
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "TotalSetCount" : 0,
  "Message" : "Message",
  "Data" : [ {
    "TimesheetEnd" : "2000-01-23T04:56:07.000+00:00",
    "DateImageCaptured" : "2000-01-23T04:56:07.000+00:00",
    "OriginalFileName" : "OriginalFileName",
    "DocumentS3SignedUrl" : "DocumentS3SignedUrl",
    "TimesheetId" : 6,
    "Latitude" : 2.3021358869347655,
    "NonImageFilePath" : "NonImageFilePath",
    "Notes" : "Notes",
    "TimesheetStart" : "2000-01-23T04:56:07.000+00:00",
    "AttachmentType" : "Image",
    "ImageLargeS3SignedUrl" : "ImageLargeS3SignedUrl",
    "FirstName" : "FirstName",
    "ImageSmallS3SignedUrl" : "ImageSmallS3SignedUrl",
    "ImageMediumS3SignedUrl" : "ImageMediumS3SignedUrl",
    "StorageAllocationBytes" : 9,
    "Longitude" : 7.061401241503109,
    "EmailAddress" : "EmailAddress",
    "FileAttachmentId" : 1,
    "ImageMediumFilePath" : "ImageMediumFilePath",
    "OrgId" : 5,
    "ImageSmallFilePath" : "ImageSmallFilePath",
    "MobilePlatform" : "Unknown",
    "Username" : "Username",
    "ImageLargeFilePath" : "ImageLargeFilePath",
    "UserId" : 5,
    "LastName" : "LastName",
    "DateUploaded" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "TimesheetEnd" : "2000-01-23T04:56:07.000+00:00",
    "DateImageCaptured" : "2000-01-23T04:56:07.000+00:00",
    "OriginalFileName" : "OriginalFileName",
    "DocumentS3SignedUrl" : "DocumentS3SignedUrl",
    "TimesheetId" : 6,
    "Latitude" : 2.3021358869347655,
    "NonImageFilePath" : "NonImageFilePath",
    "Notes" : "Notes",
    "TimesheetStart" : "2000-01-23T04:56:07.000+00:00",
    "AttachmentType" : "Image",
    "ImageLargeS3SignedUrl" : "ImageLargeS3SignedUrl",
    "FirstName" : "FirstName",
    "ImageSmallS3SignedUrl" : "ImageSmallS3SignedUrl",
    "ImageMediumS3SignedUrl" : "ImageMediumS3SignedUrl",
    "StorageAllocationBytes" : 9,
    "Longitude" : 7.061401241503109,
    "EmailAddress" : "EmailAddress",
    "FileAttachmentId" : 1,
    "ImageMediumFilePath" : "ImageMediumFilePath",
    "OrgId" : 5,
    "ImageSmallFilePath" : "ImageSmallFilePath",
    "MobilePlatform" : "Unknown",
    "Username" : "Username",
    "ImageLargeFilePath" : "ImageLargeFilePath",
    "UserId" : 5,
    "LastName" : "LastName",
    "DateUploaded" : "2000-01-23T04:56:07.000+00:00"
  } ]
}}, {contentType=application/xml, example=<null>
  <TotalSetCount>123</TotalSetCount>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "TotalSetCount" : 0,
  "Message" : "Message",
  "Data" : [ {
    "TimesheetEnd" : "2000-01-23T04:56:07.000+00:00",
    "DateImageCaptured" : "2000-01-23T04:56:07.000+00:00",
    "OriginalFileName" : "OriginalFileName",
    "DocumentS3SignedUrl" : "DocumentS3SignedUrl",
    "TimesheetId" : 6,
    "Latitude" : 2.3021358869347655,
    "NonImageFilePath" : "NonImageFilePath",
    "Notes" : "Notes",
    "TimesheetStart" : "2000-01-23T04:56:07.000+00:00",
    "AttachmentType" : "Image",
    "ImageLargeS3SignedUrl" : "ImageLargeS3SignedUrl",
    "FirstName" : "FirstName",
    "ImageSmallS3SignedUrl" : "ImageSmallS3SignedUrl",
    "ImageMediumS3SignedUrl" : "ImageMediumS3SignedUrl",
    "StorageAllocationBytes" : 9,
    "Longitude" : 7.061401241503109,
    "EmailAddress" : "EmailAddress",
    "FileAttachmentId" : 1,
    "ImageMediumFilePath" : "ImageMediumFilePath",
    "OrgId" : 5,
    "ImageSmallFilePath" : "ImageSmallFilePath",
    "MobilePlatform" : "Unknown",
    "Username" : "Username",
    "ImageLargeFilePath" : "ImageLargeFilePath",
    "UserId" : 5,
    "LastName" : "LastName",
    "DateUploaded" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "TimesheetEnd" : "2000-01-23T04:56:07.000+00:00",
    "DateImageCaptured" : "2000-01-23T04:56:07.000+00:00",
    "OriginalFileName" : "OriginalFileName",
    "DocumentS3SignedUrl" : "DocumentS3SignedUrl",
    "TimesheetId" : 6,
    "Latitude" : 2.3021358869347655,
    "NonImageFilePath" : "NonImageFilePath",
    "Notes" : "Notes",
    "TimesheetStart" : "2000-01-23T04:56:07.000+00:00",
    "AttachmentType" : "Image",
    "ImageLargeS3SignedUrl" : "ImageLargeS3SignedUrl",
    "FirstName" : "FirstName",
    "ImageSmallS3SignedUrl" : "ImageSmallS3SignedUrl",
    "ImageMediumS3SignedUrl" : "ImageMediumS3SignedUrl",
    "StorageAllocationBytes" : 9,
    "Longitude" : 7.061401241503109,
    "EmailAddress" : "EmailAddress",
    "FileAttachmentId" : 1,
    "ImageMediumFilePath" : "ImageMediumFilePath",
    "OrgId" : 5,
    "ImageSmallFilePath" : "ImageSmallFilePath",
    "MobilePlatform" : "Unknown",
    "Username" : "Username",
    "ImageLargeFilePath" : "ImageLargeFilePath",
    "UserId" : 5,
    "LastName" : "LastName",
    "DateUploaded" : "2000-01-23T04:56:07.000+00:00"
  } ]
}}, {contentType=application/xml, example=<null>
  <TotalSetCount>123</TotalSetCount>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter skip: (query) Skip this many items 
     - parameter take: (query) Take this many items 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment> 
     */
    open class func reportsGetOrganisationTimesheetFileAttachmentsWithRequestBuilder(startDate: Date, endDate: Date, skip: Int, take: Int, userIds: String, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment> {
        let path = "/api/Reports/GetOrganisationTimesheetFileAttachments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "Skip": skip.encodeToJSON(), 
            "Take": take.encodeToJSON(), 
            "UserIds": userIds
        ])
        
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseForPaginatedListOrgReportTimesheetFileAttachment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter skip: (query) Skip this many items 
     - parameter take: (query) Take this many items 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter keywords: (query) Search the transcripts by keyword(s) 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetOrganisationTranscripts(startDate: Date, endDate: Date, skip: Int, take: Int, userIds: String, keywords: String, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseForPaginatedListOrgReportTranscript?,_ error: Error?) -> Void)) {
        reportsGetOrganisationTranscriptsWithRequestBuilder(startDate: startDate, endDate: endDate, skip: skip, take: take, userIds: userIds, keywords: keywords, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the 'ReportAdmin' permission.
     - GET /api/Reports/GetOrganisationTranscripts
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "TotalSetCount" : 0,
  "Message" : "Message",
  "Data" : [ {
    "TimesheetEnd" : "2000-01-23T04:56:07.000+00:00",
    "DateImageCaptured" : "2000-01-23T04:56:07.000+00:00",
    "OriginalFileName" : "OriginalFileName",
    "FinishedJob" : true,
    "DocumentS3SignedUrl" : "DocumentS3SignedUrl",
    "JobName" : "JobName",
    "TimesheetId" : 1,
    "Latitude" : 7.061401241503109,
    "CompletedProcessing" : "2000-01-23T04:56:07.000+00:00",
    "StartedProcessing" : "2000-01-23T04:56:07.000+00:00",
    "Created" : "2000-01-23T04:56:07.000+00:00",
    "MediaType" : "Other",
    "NonImageFilePath" : "NonImageFilePath",
    "TranscriptionStatus" : "Saved",
    "Notes" : "Notes",
    "TimesheetStart" : "2000-01-23T04:56:07.000+00:00",
    "AttachmentType" : "Image",
    "ImageLargeS3SignedUrl" : "ImageLargeS3SignedUrl",
    "FirstName" : "FirstName",
    "ImageSmallS3SignedUrl" : "ImageSmallS3SignedUrl",
    "ImageMediumS3SignedUrl" : "ImageMediumS3SignedUrl",
    "StorageAllocationBytes" : 3,
    "Longitude" : 9.301444243932576,
    "EmailAddress" : "EmailAddress",
    "FileAttachmentId" : 5,
    "ImageMediumFilePath" : "ImageMediumFilePath",
    "TranscriptionId" : 6,
    "OrgId" : 2,
    "ImageSmallFilePath" : "ImageSmallFilePath",
    "MobilePlatform" : "Unknown",
    "Contents" : "Contents",
    "Username" : "Username",
    "ImageLargeFilePath" : "ImageLargeFilePath",
    "UserId" : 5,
    "LastName" : "LastName",
    "DateUploaded" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "TimesheetEnd" : "2000-01-23T04:56:07.000+00:00",
    "DateImageCaptured" : "2000-01-23T04:56:07.000+00:00",
    "OriginalFileName" : "OriginalFileName",
    "FinishedJob" : true,
    "DocumentS3SignedUrl" : "DocumentS3SignedUrl",
    "JobName" : "JobName",
    "TimesheetId" : 1,
    "Latitude" : 7.061401241503109,
    "CompletedProcessing" : "2000-01-23T04:56:07.000+00:00",
    "StartedProcessing" : "2000-01-23T04:56:07.000+00:00",
    "Created" : "2000-01-23T04:56:07.000+00:00",
    "MediaType" : "Other",
    "NonImageFilePath" : "NonImageFilePath",
    "TranscriptionStatus" : "Saved",
    "Notes" : "Notes",
    "TimesheetStart" : "2000-01-23T04:56:07.000+00:00",
    "AttachmentType" : "Image",
    "ImageLargeS3SignedUrl" : "ImageLargeS3SignedUrl",
    "FirstName" : "FirstName",
    "ImageSmallS3SignedUrl" : "ImageSmallS3SignedUrl",
    "ImageMediumS3SignedUrl" : "ImageMediumS3SignedUrl",
    "StorageAllocationBytes" : 3,
    "Longitude" : 9.301444243932576,
    "EmailAddress" : "EmailAddress",
    "FileAttachmentId" : 5,
    "ImageMediumFilePath" : "ImageMediumFilePath",
    "TranscriptionId" : 6,
    "OrgId" : 2,
    "ImageSmallFilePath" : "ImageSmallFilePath",
    "MobilePlatform" : "Unknown",
    "Contents" : "Contents",
    "Username" : "Username",
    "ImageLargeFilePath" : "ImageLargeFilePath",
    "UserId" : 5,
    "LastName" : "LastName",
    "DateUploaded" : "2000-01-23T04:56:07.000+00:00"
  } ]
}}, {contentType=application/xml, example=<null>
  <TotalSetCount>123</TotalSetCount>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "TotalSetCount" : 0,
  "Message" : "Message",
  "Data" : [ {
    "TimesheetEnd" : "2000-01-23T04:56:07.000+00:00",
    "DateImageCaptured" : "2000-01-23T04:56:07.000+00:00",
    "OriginalFileName" : "OriginalFileName",
    "FinishedJob" : true,
    "DocumentS3SignedUrl" : "DocumentS3SignedUrl",
    "JobName" : "JobName",
    "TimesheetId" : 1,
    "Latitude" : 7.061401241503109,
    "CompletedProcessing" : "2000-01-23T04:56:07.000+00:00",
    "StartedProcessing" : "2000-01-23T04:56:07.000+00:00",
    "Created" : "2000-01-23T04:56:07.000+00:00",
    "MediaType" : "Other",
    "NonImageFilePath" : "NonImageFilePath",
    "TranscriptionStatus" : "Saved",
    "Notes" : "Notes",
    "TimesheetStart" : "2000-01-23T04:56:07.000+00:00",
    "AttachmentType" : "Image",
    "ImageLargeS3SignedUrl" : "ImageLargeS3SignedUrl",
    "FirstName" : "FirstName",
    "ImageSmallS3SignedUrl" : "ImageSmallS3SignedUrl",
    "ImageMediumS3SignedUrl" : "ImageMediumS3SignedUrl",
    "StorageAllocationBytes" : 3,
    "Longitude" : 9.301444243932576,
    "EmailAddress" : "EmailAddress",
    "FileAttachmentId" : 5,
    "ImageMediumFilePath" : "ImageMediumFilePath",
    "TranscriptionId" : 6,
    "OrgId" : 2,
    "ImageSmallFilePath" : "ImageSmallFilePath",
    "MobilePlatform" : "Unknown",
    "Contents" : "Contents",
    "Username" : "Username",
    "ImageLargeFilePath" : "ImageLargeFilePath",
    "UserId" : 5,
    "LastName" : "LastName",
    "DateUploaded" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "TimesheetEnd" : "2000-01-23T04:56:07.000+00:00",
    "DateImageCaptured" : "2000-01-23T04:56:07.000+00:00",
    "OriginalFileName" : "OriginalFileName",
    "FinishedJob" : true,
    "DocumentS3SignedUrl" : "DocumentS3SignedUrl",
    "JobName" : "JobName",
    "TimesheetId" : 1,
    "Latitude" : 7.061401241503109,
    "CompletedProcessing" : "2000-01-23T04:56:07.000+00:00",
    "StartedProcessing" : "2000-01-23T04:56:07.000+00:00",
    "Created" : "2000-01-23T04:56:07.000+00:00",
    "MediaType" : "Other",
    "NonImageFilePath" : "NonImageFilePath",
    "TranscriptionStatus" : "Saved",
    "Notes" : "Notes",
    "TimesheetStart" : "2000-01-23T04:56:07.000+00:00",
    "AttachmentType" : "Image",
    "ImageLargeS3SignedUrl" : "ImageLargeS3SignedUrl",
    "FirstName" : "FirstName",
    "ImageSmallS3SignedUrl" : "ImageSmallS3SignedUrl",
    "ImageMediumS3SignedUrl" : "ImageMediumS3SignedUrl",
    "StorageAllocationBytes" : 3,
    "Longitude" : 9.301444243932576,
    "EmailAddress" : "EmailAddress",
    "FileAttachmentId" : 5,
    "ImageMediumFilePath" : "ImageMediumFilePath",
    "TranscriptionId" : 6,
    "OrgId" : 2,
    "ImageSmallFilePath" : "ImageSmallFilePath",
    "MobilePlatform" : "Unknown",
    "Contents" : "Contents",
    "Username" : "Username",
    "ImageLargeFilePath" : "ImageLargeFilePath",
    "UserId" : 5,
    "LastName" : "LastName",
    "DateUploaded" : "2000-01-23T04:56:07.000+00:00"
  } ]
}}, {contentType=application/xml, example=<null>
  <TotalSetCount>123</TotalSetCount>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter skip: (query) Skip this many items 
     - parameter take: (query) Take this many items 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter keywords: (query) Search the transcripts by keyword(s) 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseForPaginatedListOrgReportTranscript> 
     */
    open class func reportsGetOrganisationTranscriptsWithRequestBuilder(startDate: Date, endDate: Date, skip: Int, take: Int, userIds: String, keywords: String, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseForPaginatedListOrgReportTranscript> {
        let path = "/api/Reports/GetOrganisationTranscripts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "Skip": skip.encodeToJSON(), 
            "Take": take.encodeToJSON(), 
            "UserIds": userIds, 
            "Keywords": keywords
        ])
        
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseForPaginatedListOrgReportTranscript>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Reports on Organisation trips (GPS tracking from whole organisation).    Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter skip: (query) Skip this many items 
     - parameter take: (query) Take this many items 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetOrganisationTrips(startDate: Date, endDate: Date, skip: Int, take: Int, userIds: String, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseForPaginatedListOrgReportTrip?,_ error: Error?) -> Void)) {
        reportsGetOrganisationTripsWithRequestBuilder(startDate: startDate, endDate: endDate, skip: skip, take: take, userIds: userIds, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Reports on Organisation trips (GPS tracking from whole organisation).    Requires the 'ReportAdmin' permission.
     - GET /api/Reports/GetOrganisationTrips
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "TotalSetCount" : 0,
  "Message" : "Message",
  "Data" : [ {
    "EndAddress" : "EndAddress",
    "VehicleMake" : "VehicleMake",
    "FirstName" : "FirstName",
    "TripTotalCost" : 9.301444243932576,
    "VehicleId" : 5,
    "VehicleName" : "VehicleName",
    "CacheExpiryDate" : "2000-01-23T04:56:07.000+00:00",
    "TimesheetId" : 1,
    "VehicleYear" : "VehicleYear",
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "StartAddress" : "StartAddress",
    "EmailAddress" : "EmailAddress",
    "TripId" : 6,
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "OrgId" : 2,
    "MobilePlatform" : "Unknown",
    "VehicleModel" : "VehicleModel",
    "Username" : "Username",
    "UserId" : 5,
    "TotalTripDistanceMeters" : 3.616076749251911,
    "PathCoordinates" : [ {
      "Latitude" : 2.027123023002322,
      "Longitude" : 4.145608029883936
    }, {
      "Latitude" : 2.027123023002322,
      "Longitude" : 4.145608029883936
    } ],
    "LastName" : "LastName",
    "CostPerKilometer" : 7.061401241503109
  }, {
    "EndAddress" : "EndAddress",
    "VehicleMake" : "VehicleMake",
    "FirstName" : "FirstName",
    "TripTotalCost" : 9.301444243932576,
    "VehicleId" : 5,
    "VehicleName" : "VehicleName",
    "CacheExpiryDate" : "2000-01-23T04:56:07.000+00:00",
    "TimesheetId" : 1,
    "VehicleYear" : "VehicleYear",
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "StartAddress" : "StartAddress",
    "EmailAddress" : "EmailAddress",
    "TripId" : 6,
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "OrgId" : 2,
    "MobilePlatform" : "Unknown",
    "VehicleModel" : "VehicleModel",
    "Username" : "Username",
    "UserId" : 5,
    "TotalTripDistanceMeters" : 3.616076749251911,
    "PathCoordinates" : [ {
      "Latitude" : 2.027123023002322,
      "Longitude" : 4.145608029883936
    }, {
      "Latitude" : 2.027123023002322,
      "Longitude" : 4.145608029883936
    } ],
    "LastName" : "LastName",
    "CostPerKilometer" : 7.061401241503109
  } ]
}}, {contentType=application/xml, example=<null>
  <TotalSetCount>123</TotalSetCount>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "TotalSetCount" : 0,
  "Message" : "Message",
  "Data" : [ {
    "EndAddress" : "EndAddress",
    "VehicleMake" : "VehicleMake",
    "FirstName" : "FirstName",
    "TripTotalCost" : 9.301444243932576,
    "VehicleId" : 5,
    "VehicleName" : "VehicleName",
    "CacheExpiryDate" : "2000-01-23T04:56:07.000+00:00",
    "TimesheetId" : 1,
    "VehicleYear" : "VehicleYear",
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "StartAddress" : "StartAddress",
    "EmailAddress" : "EmailAddress",
    "TripId" : 6,
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "OrgId" : 2,
    "MobilePlatform" : "Unknown",
    "VehicleModel" : "VehicleModel",
    "Username" : "Username",
    "UserId" : 5,
    "TotalTripDistanceMeters" : 3.616076749251911,
    "PathCoordinates" : [ {
      "Latitude" : 2.027123023002322,
      "Longitude" : 4.145608029883936
    }, {
      "Latitude" : 2.027123023002322,
      "Longitude" : 4.145608029883936
    } ],
    "LastName" : "LastName",
    "CostPerKilometer" : 7.061401241503109
  }, {
    "EndAddress" : "EndAddress",
    "VehicleMake" : "VehicleMake",
    "FirstName" : "FirstName",
    "TripTotalCost" : 9.301444243932576,
    "VehicleId" : 5,
    "VehicleName" : "VehicleName",
    "CacheExpiryDate" : "2000-01-23T04:56:07.000+00:00",
    "TimesheetId" : 1,
    "VehicleYear" : "VehicleYear",
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "StartAddress" : "StartAddress",
    "EmailAddress" : "EmailAddress",
    "TripId" : 6,
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "OrgId" : 2,
    "MobilePlatform" : "Unknown",
    "VehicleModel" : "VehicleModel",
    "Username" : "Username",
    "UserId" : 5,
    "TotalTripDistanceMeters" : 3.616076749251911,
    "PathCoordinates" : [ {
      "Latitude" : 2.027123023002322,
      "Longitude" : 4.145608029883936
    }, {
      "Latitude" : 2.027123023002322,
      "Longitude" : 4.145608029883936
    } ],
    "LastName" : "LastName",
    "CostPerKilometer" : 7.061401241503109
  } ]
}}, {contentType=application/xml, example=<null>
  <TotalSetCount>123</TotalSetCount>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter skip: (query) Skip this many items 
     - parameter take: (query) Take this many items 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseForPaginatedListOrgReportTrip> 
     */
    open class func reportsGetOrganisationTripsWithRequestBuilder(startDate: Date, endDate: Date, skip: Int, take: Int, userIds: String, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseForPaginatedListOrgReportTrip> {
        let path = "/api/Reports/GetOrganisationTrips"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "Skip": skip.encodeToJSON(), 
            "Take": take.encodeToJSON(), 
            "UserIds": userIds
        ])
        
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseForPaginatedListOrgReportTrip>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum CSSort_reportsGetRawDataAdmin: String { 
        case emailAddress = "EmailAddress"
        case jobCode = "JobCode"
        case taskName = "TaskName"
        case clientName = "ClientName"
        case projectName = "ProjectName"
        case startDate = "StartDate"
        case endDate = "EndDate"
        case spanSeconds = "SpanSeconds"
        case description = "Description"
        case payAmount = "PayAmount"
        case payOvertimeAmount = "PayOvertimeAmount"
        case tripCost = "TripCost"
        case tripDistanceMeters = "TripDistanceMeters"
        case username = "Username"
    }

    /**
     * enum for parameter order
     */
    public enum CSOrder_reportsGetRawDataAdmin: String { 
        case ascending = "Ascending"
        case descending = "Descending"
    }

    /**
     Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter sort: (query) Decide which column to sort on 
     - parameter order: (query) Decide which direction to sort the column 
     - parameter skip: (query) Skip this many rows 
     - parameter take: (query) Take this many rows 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsGetRawDataAdmin(startDate: Date, endDate: Date, userIds: String, sort: CSSort_reportsGetRawDataAdmin, order: CSOrder_reportsGetRawDataAdmin, skip: Int, take: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseForPaginatedListRawReportItem?,_ error: Error?) -> Void)) {
        reportsGetRawDataAdminWithRequestBuilder(startDate: startDate, endDate: endDate, userIds: userIds, sort: sort, order: order, skip: skip, take: take, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
     - GET /api/Reports/GetRawDataAdmin
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "TotalSetCount" : 0,
  "Message" : "Message",
  "Data" : [ {
    "PayOvertimeAmount" : 2.3021358869347655,
    "Description" : "Description",
    "ProjectName" : "ProjectName",
    "PayAmount" : 5.637376656633329,
    "OrganisationId" : 6,
    "SpanSeconds" : 5,
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "EmailAddress" : "EmailAddress",
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "ClientName" : "ClientName",
    "TripCost" : 7.061401241503109,
    "Username" : "Username",
    "TaskName" : "TaskName",
    "UserId" : 1,
    "JobCode" : "JobCode",
    "TripDistanceMeters" : 9.301444243932576
  }, {
    "PayOvertimeAmount" : 2.3021358869347655,
    "Description" : "Description",
    "ProjectName" : "ProjectName",
    "PayAmount" : 5.637376656633329,
    "OrganisationId" : 6,
    "SpanSeconds" : 5,
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "EmailAddress" : "EmailAddress",
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "ClientName" : "ClientName",
    "TripCost" : 7.061401241503109,
    "Username" : "Username",
    "TaskName" : "TaskName",
    "UserId" : 1,
    "JobCode" : "JobCode",
    "TripDistanceMeters" : 9.301444243932576
  } ]
}}, {contentType=application/xml, example=<null>
  <TotalSetCount>123</TotalSetCount>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "TotalSetCount" : 0,
  "Message" : "Message",
  "Data" : [ {
    "PayOvertimeAmount" : 2.3021358869347655,
    "Description" : "Description",
    "ProjectName" : "ProjectName",
    "PayAmount" : 5.637376656633329,
    "OrganisationId" : 6,
    "SpanSeconds" : 5,
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "EmailAddress" : "EmailAddress",
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "ClientName" : "ClientName",
    "TripCost" : 7.061401241503109,
    "Username" : "Username",
    "TaskName" : "TaskName",
    "UserId" : 1,
    "JobCode" : "JobCode",
    "TripDistanceMeters" : 9.301444243932576
  }, {
    "PayOvertimeAmount" : 2.3021358869347655,
    "Description" : "Description",
    "ProjectName" : "ProjectName",
    "PayAmount" : 5.637376656633329,
    "OrganisationId" : 6,
    "SpanSeconds" : 5,
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "EmailAddress" : "EmailAddress",
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "ClientName" : "ClientName",
    "TripCost" : 7.061401241503109,
    "Username" : "Username",
    "TaskName" : "TaskName",
    "UserId" : 1,
    "JobCode" : "JobCode",
    "TripDistanceMeters" : 9.301444243932576
  } ]
}}, {contentType=application/xml, example=<null>
  <TotalSetCount>123</TotalSetCount>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter sort: (query) Decide which column to sort on 
     - parameter order: (query) Decide which direction to sort the column 
     - parameter skip: (query) Skip this many rows 
     - parameter take: (query) Take this many rows 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseForPaginatedListRawReportItem> 
     */
    open class func reportsGetRawDataAdminWithRequestBuilder(startDate: Date, endDate: Date, userIds: String, sort: CSSort_reportsGetRawDataAdmin, order: CSOrder_reportsGetRawDataAdmin, skip: Int, take: Int, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseForPaginatedListRawReportItem> {
        let path = "/api/Reports/GetRawDataAdmin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "UserIds": userIds, 
            "Sort": sort.rawValue, 
            "Order": order.rawValue, 
            "Skip": skip.encodeToJSON(), 
            "Take": take.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseForPaginatedListRawReportItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Gets project cost estimations VS actual cost for date range and users.    Requires the 'ReportAdmin' permission.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsProjectCostingsAdmin(startDate: Date, endDate: Date, userIds: String, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseListProjectCostingReportItem?,_ error: Error?) -> Void)) {
        reportsProjectCostingsAdminWithRequestBuilder(startDate: startDate, endDate: endDate, userIds: userIds, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Gets project cost estimations VS actual cost for date range and users.    Requires the 'ReportAdmin' permission.
     - GET /api/Reports/ProjectCostingsAdmin
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ {
    "ClientName" : "ClientName",
    "ActualCostFiltered" : 5.637376656633329,
    "ProjectName" : "ProjectName",
    "ProjectId" : 0,
    "OrganisationId" : 1,
    "EstimatedCost" : 5.962133916683182,
    "ClientId" : 6,
    "ActualCost" : 2.3021358869347655
  }, {
    "ClientName" : "ClientName",
    "ActualCostFiltered" : 5.637376656633329,
    "ProjectName" : "ProjectName",
    "ProjectId" : 0,
    "OrganisationId" : 1,
    "EstimatedCost" : 5.962133916683182,
    "ClientId" : 6,
    "ActualCost" : 2.3021358869347655
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ {
    "ClientName" : "ClientName",
    "ActualCostFiltered" : 5.637376656633329,
    "ProjectName" : "ProjectName",
    "ProjectId" : 0,
    "OrganisationId" : 1,
    "EstimatedCost" : 5.962133916683182,
    "ClientId" : 6,
    "ActualCost" : 2.3021358869347655
  }, {
    "ClientName" : "ClientName",
    "ActualCostFiltered" : 5.637376656633329,
    "ProjectName" : "ProjectName",
    "ProjectId" : 0,
    "OrganisationId" : 1,
    "EstimatedCost" : 5.962133916683182,
    "ClientId" : 6,
    "ActualCost" : 2.3021358869347655
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter userIds: (query) A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string. 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseListProjectCostingReportItem> 
     */
    open class func reportsProjectCostingsAdminWithRequestBuilder(startDate: Date, endDate: Date, userIds: String, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseListProjectCostingReportItem> {
        let path = "/api/Reports/ProjectCostingsAdmin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON(), 
            "UserIds": userIds
        ])
        
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseListProjectCostingReportItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Timeseries jobs data for the logged in user.    Requires the 'ViewOwnReports' or 'SubmitTimesheets'.
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportsUserJobsOverTime(startDate: Date, endDate: Date, xChronosheetsAuth: String, completion: @escaping ((_ data: CSApiResponseListJobSeriesReportItem?,_ error: Error?) -> Void)) {
        reportsUserJobsOverTimeWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Timeseries jobs data for the logged in user.    Requires the 'ViewOwnReports' or 'SubmitTimesheets'.
     - GET /api/Reports/UserJobsOverTime
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ {
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "ClientName" : "ClientName",
    "ProjectName" : "ProjectName",
    "JobCode" : "JobCode",
    "ProjectId" : 1,
    "ClientId" : 6,
    "SpanSeconds" : 5,
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "JobId" : 0
  }, {
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "ClientName" : "ClientName",
    "ProjectName" : "ProjectName",
    "JobCode" : "JobCode",
    "ProjectId" : 1,
    "ClientId" : 6,
    "SpanSeconds" : 5,
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "JobId" : 0
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ {
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "ClientName" : "ClientName",
    "ProjectName" : "ProjectName",
    "JobCode" : "JobCode",
    "ProjectId" : 1,
    "ClientId" : 6,
    "SpanSeconds" : 5,
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "JobId" : 0
  }, {
    "StartDate" : "2000-01-23T04:56:07.000+00:00",
    "ClientName" : "ClientName",
    "ProjectName" : "ProjectName",
    "JobCode" : "JobCode",
    "ProjectId" : 1,
    "ClientId" : 6,
    "SpanSeconds" : 5,
    "EndDate" : "2000-01-23T04:56:07.000+00:00",
    "JobId" : 0
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter startDate: (query) The start date for the date range.  Report data in the response is after this date 
     - parameter endDate: (query) The end date for the date range.  Report data in the response is before this date 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CSApiResponseListJobSeriesReportItem> 
     */
    open class func reportsUserJobsOverTimeWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String) -> RequestBuilder<CSApiResponseListJobSeriesReportItem> {
        let path = "/api/Reports/UserJobsOverTime"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CSApiResponseListJobSeriesReportItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
