//
// TimesheetsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TimesheetsAPI {
    /**
     Inserts a single timesheet record
     
     - parameter request: (body) The timesheet request object 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timesheetsCreateSingleTimesheet(request: CsApiTimesheet, xChronosheetsAuth: String, completion: @escaping ((_ data: CsApiApiResponseInt32?,_ error: Error?) -> Void)) {
        timesheetsCreateSingleTimesheetWithRequestBuilder(request: request, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Inserts a single timesheet record
     - PUT /api/Timesheets/CreateSingleTimesheet
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : 0
}}, {contentType=application/xml, example=<null>
  <Data>123</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : 0
}}, {contentType=application/xml, example=<null>
  <Data>123</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter request: (body) The timesheet request object 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CsApiApiResponseInt32> 
     */
    open class func timesheetsCreateSingleTimesheetWithRequestBuilder(request: CsApiTimesheet, xChronosheetsAuth: String) -> RequestBuilder<CsApiApiResponseInt32> {
        let path = "/api/Timesheets/CreateSingleTimesheet"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CsApiApiResponseInt32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Delete a timesheet
     
     - parameter timesheetId: (query) The ID of the timesheet to delete 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timesheetsDeleteTimesheet(timesheetId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: CsApiApiResponseBoolean?,_ error: Error?) -> Void)) {
        timesheetsDeleteTimesheetWithRequestBuilder(timesheetId: timesheetId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Delete a timesheet
     - DELETE /api/Timesheets/DeleteTimesheet
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : true
}}, {contentType=application/xml, example=<null>
  <Data>true</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : true
}}, {contentType=application/xml, example=<null>
  <Data>true</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter timesheetId: (query) The ID of the timesheet to delete 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CsApiApiResponseBoolean> 
     */
    open class func timesheetsDeleteTimesheetWithRequestBuilder(timesheetId: Int, xChronosheetsAuth: String) -> RequestBuilder<CsApiApiResponseBoolean> {
        let path = "/api/Timesheets/DeleteTimesheet"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "TimesheetId": timesheetId.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CsApiApiResponseBoolean>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get timesheets between start and end dates
     
     - parameter startDate: (query) The start date of the date range 
     - parameter endDate: (query) The end date of the date range 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timesheetsGetTimesheets(startDate: Date, endDate: Date, xChronosheetsAuth: String, completion: @escaping ((_ data: CsApiApiResponseListTimesheet?,_ error: Error?) -> Void)) {
        timesheetsGetTimesheetsWithRequestBuilder(startDate: startDate, endDate: endDate, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get timesheets between start and end dates
     - GET /api/Timesheets/GetTimesheets
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ {
    "TaskId" : 5,
    "StartDateTime" : "2000-01-23T04:56:07.000+00:00",
    "Description" : "Description",
    "EndDateTime" : "2000-01-23T04:56:07.000+00:00",
    "PayAmount" : 7.061401241503109,
    "UserId" : 6,
    "IncludesOvertime" : true,
    "OvertimePayAmount" : 9.301444243932576,
    "TimesheetId" : 0,
    "FileAttachmentCount" : 2,
    "JobId" : 1,
    "TripId" : 5
  }, {
    "TaskId" : 5,
    "StartDateTime" : "2000-01-23T04:56:07.000+00:00",
    "Description" : "Description",
    "EndDateTime" : "2000-01-23T04:56:07.000+00:00",
    "PayAmount" : 7.061401241503109,
    "UserId" : 6,
    "IncludesOvertime" : true,
    "OvertimePayAmount" : 9.301444243932576,
    "TimesheetId" : 0,
    "FileAttachmentCount" : 2,
    "JobId" : 1,
    "TripId" : 5
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ {
    "TaskId" : 5,
    "StartDateTime" : "2000-01-23T04:56:07.000+00:00",
    "Description" : "Description",
    "EndDateTime" : "2000-01-23T04:56:07.000+00:00",
    "PayAmount" : 7.061401241503109,
    "UserId" : 6,
    "IncludesOvertime" : true,
    "OvertimePayAmount" : 9.301444243932576,
    "TimesheetId" : 0,
    "FileAttachmentCount" : 2,
    "JobId" : 1,
    "TripId" : 5
  }, {
    "TaskId" : 5,
    "StartDateTime" : "2000-01-23T04:56:07.000+00:00",
    "Description" : "Description",
    "EndDateTime" : "2000-01-23T04:56:07.000+00:00",
    "PayAmount" : 7.061401241503109,
    "UserId" : 6,
    "IncludesOvertime" : true,
    "OvertimePayAmount" : 9.301444243932576,
    "TimesheetId" : 0,
    "FileAttachmentCount" : 2,
    "JobId" : 1,
    "TripId" : 5
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter startDate: (query) The start date of the date range 
     - parameter endDate: (query) The end date of the date range 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CsApiApiResponseListTimesheet> 
     */
    open class func timesheetsGetTimesheetsWithRequestBuilder(startDate: Date, endDate: Date, xChronosheetsAuth: String) -> RequestBuilder<CsApiApiResponseListTimesheet> {
        let path = "/api/Timesheets/GetTimesheets"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "StartDate": startDate.encodeToJSON(), 
            "EndDate": endDate.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CsApiApiResponseListTimesheet>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Batch update timesheets
     
     - parameter request: (body) The batch update timesheets request 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func timesheetsUpdateTimesheets(request: CsApiBatchUpdateTimesheetRequest, xChronosheetsAuth: String, completion: @escaping ((_ data: CsApiApiResponseListInt32?,_ error: Error?) -> Void)) {
        timesheetsUpdateTimesheetsWithRequestBuilder(request: request, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Batch update timesheets
     - POST /api/Timesheets/UpdateTimesheets
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ 0, 0 ]
}}, {contentType=application/xml, example=<null>
  <Data>123</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : "Succeeded",
  "Message" : "Message",
  "Data" : [ 0, 0 ]
}}, {contentType=application/xml, example=<null>
  <Data>123</Data>
  <Status>aeiou</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter request: (body) The batch update timesheets request 
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CsApiApiResponseListInt32> 
     */
    open class func timesheetsUpdateTimesheetsWithRequestBuilder(request: CsApiBatchUpdateTimesheetRequest, xChronosheetsAuth: String) -> RequestBuilder<CsApiApiResponseListInt32> {
        let path = "/api/Timesheets/UpdateTimesheets"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CsApiApiResponseListInt32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
