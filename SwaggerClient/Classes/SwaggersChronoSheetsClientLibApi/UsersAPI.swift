//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UsersAPI {
    /**
     Create a user in your organisation
     
     - parameter request: (body)  
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersCreateTimesheetUser(request: CsApiInsertUserRequest, xChronosheetsAuth: String, completion: @escaping ((_ data: CsApiApiResponseInsertUserResponse?,_ error: Error?) -> Void)) {
        usersCreateTimesheetUserWithRequestBuilder(request: request, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a user in your organisation
     - PUT /api/Users/CreateTimesheetUser
     - examples: [{contentType=application/json, example={
  "Status" : 1,
  "Message" : "Message",
  "Data" : {
    "ValidationErrors" : [ "ValidationErrors", "ValidationErrors" ],
    "UserId" : 6,
    "OrganisationId" : 0
  }
}}, {contentType=application/xml, example=<null>
  <Status>123</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : 1,
  "Message" : "Message",
  "Data" : {
    "ValidationErrors" : [ "ValidationErrors", "ValidationErrors" ],
    "UserId" : 6,
    "OrganisationId" : 0
  }
}}, {contentType=application/xml, example=<null>
  <Status>123</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter request: (body)  
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CsApiApiResponseInsertUserResponse> 
     */
    open class func usersCreateTimesheetUserWithRequestBuilder(request: CsApiInsertUserRequest, xChronosheetsAuth: String) -> RequestBuilder<CsApiApiResponseInsertUserResponse> {
        let path = "/api/Users/CreateTimesheetUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CsApiApiResponseInsertUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Get a particular user in your organisation
     
     - parameter userId: (query)  
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersGetTimesheetUser(userId: Int, xChronosheetsAuth: String, completion: @escaping ((_ data: CsApiApiResponseUserForManagement?,_ error: Error?) -> Void)) {
        usersGetTimesheetUserWithRequestBuilder(userId: userId, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a particular user in your organisation
     - GET /api/Users/GetTimesheetUser
     - examples: [{contentType=application/json, example={
  "Status" : 0,
  "Message" : "Message",
  "Data" : {
    "IsSubscribedToNewsletter" : true,
    "SetupWizardRequired" : true,
    "UserName" : "UserName",
    "Organisation" : {
      "Timezone" : "Timezone",
      "Suburb" : "Suburb",
      "SubscriptionCustomerId" : "SubscriptionCustomerId",
      "SubscriptionPlanId" : "SubscriptionPlanId",
      "Postcode" : "Postcode",
      "EmailAddress" : "EmailAddress",
      "Name" : "Name",
      "NumberSeatsAvailable" : 6,
      "State" : "State",
      "Phone" : "Phone",
      "AddressLine02" : "AddressLine02",
      "Country" : "Country",
      "Id" : 0,
      "AddressLine01" : "AddressLine01",
      "SignupToken" : "SignupToken"
    },
    "FirstName" : "FirstName",
    "OrganisationId" : 6,
    "Roles" : 1,
    "IsAccountActive" : true,
    "Id" : 0,
    "LastName" : "LastName",
    "AlertSettings" : 5,
    "EmailAddress" : "EmailAddress"
  }
}}, {contentType=application/xml, example=<null>
  <Status>123</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : 0,
  "Message" : "Message",
  "Data" : {
    "IsSubscribedToNewsletter" : true,
    "SetupWizardRequired" : true,
    "UserName" : "UserName",
    "Organisation" : {
      "Timezone" : "Timezone",
      "Suburb" : "Suburb",
      "SubscriptionCustomerId" : "SubscriptionCustomerId",
      "SubscriptionPlanId" : "SubscriptionPlanId",
      "Postcode" : "Postcode",
      "EmailAddress" : "EmailAddress",
      "Name" : "Name",
      "NumberSeatsAvailable" : 6,
      "State" : "State",
      "Phone" : "Phone",
      "AddressLine02" : "AddressLine02",
      "Country" : "Country",
      "Id" : 0,
      "AddressLine01" : "AddressLine01",
      "SignupToken" : "SignupToken"
    },
    "FirstName" : "FirstName",
    "OrganisationId" : 6,
    "Roles" : 1,
    "IsAccountActive" : true,
    "Id" : 0,
    "LastName" : "LastName",
    "AlertSettings" : 5,
    "EmailAddress" : "EmailAddress"
  }
}}, {contentType=application/xml, example=<null>
  <Status>123</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter userId: (query)  
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CsApiApiResponseUserForManagement> 
     */
    open class func usersGetTimesheetUserWithRequestBuilder(userId: Int, xChronosheetsAuth: String) -> RequestBuilder<CsApiApiResponseUserForManagement> {
        let path = "/api/Users/GetTimesheetUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "UserId": userId.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CsApiApiResponseUserForManagement>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get users for your organisation
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersGetTimesheetUsers(xChronosheetsAuth: String, completion: @escaping ((_ data: CsApiApiResponseListUserForManagement?,_ error: Error?) -> Void)) {
        usersGetTimesheetUsersWithRequestBuilder(xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get users for your organisation
     - GET /api/Users/GetTimesheetUsers
     - examples: [{contentType=application/json, example={
  "Status" : 5,
  "Message" : "Message",
  "Data" : [ {
    "IsSubscribedToNewsletter" : true,
    "SetupWizardRequired" : true,
    "UserName" : "UserName",
    "Organisation" : {
      "Timezone" : "Timezone",
      "Suburb" : "Suburb",
      "SubscriptionCustomerId" : "SubscriptionCustomerId",
      "SubscriptionPlanId" : "SubscriptionPlanId",
      "Postcode" : "Postcode",
      "EmailAddress" : "EmailAddress",
      "Name" : "Name",
      "NumberSeatsAvailable" : 6,
      "State" : "State",
      "Phone" : "Phone",
      "AddressLine02" : "AddressLine02",
      "Country" : "Country",
      "Id" : 0,
      "AddressLine01" : "AddressLine01",
      "SignupToken" : "SignupToken"
    },
    "FirstName" : "FirstName",
    "OrganisationId" : 6,
    "Roles" : 1,
    "IsAccountActive" : true,
    "Id" : 0,
    "LastName" : "LastName",
    "AlertSettings" : 5,
    "EmailAddress" : "EmailAddress"
  }, {
    "IsSubscribedToNewsletter" : true,
    "SetupWizardRequired" : true,
    "UserName" : "UserName",
    "Organisation" : {
      "Timezone" : "Timezone",
      "Suburb" : "Suburb",
      "SubscriptionCustomerId" : "SubscriptionCustomerId",
      "SubscriptionPlanId" : "SubscriptionPlanId",
      "Postcode" : "Postcode",
      "EmailAddress" : "EmailAddress",
      "Name" : "Name",
      "NumberSeatsAvailable" : 6,
      "State" : "State",
      "Phone" : "Phone",
      "AddressLine02" : "AddressLine02",
      "Country" : "Country",
      "Id" : 0,
      "AddressLine01" : "AddressLine01",
      "SignupToken" : "SignupToken"
    },
    "FirstName" : "FirstName",
    "OrganisationId" : 6,
    "Roles" : 1,
    "IsAccountActive" : true,
    "Id" : 0,
    "LastName" : "LastName",
    "AlertSettings" : 5,
    "EmailAddress" : "EmailAddress"
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>123</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : 5,
  "Message" : "Message",
  "Data" : [ {
    "IsSubscribedToNewsletter" : true,
    "SetupWizardRequired" : true,
    "UserName" : "UserName",
    "Organisation" : {
      "Timezone" : "Timezone",
      "Suburb" : "Suburb",
      "SubscriptionCustomerId" : "SubscriptionCustomerId",
      "SubscriptionPlanId" : "SubscriptionPlanId",
      "Postcode" : "Postcode",
      "EmailAddress" : "EmailAddress",
      "Name" : "Name",
      "NumberSeatsAvailable" : 6,
      "State" : "State",
      "Phone" : "Phone",
      "AddressLine02" : "AddressLine02",
      "Country" : "Country",
      "Id" : 0,
      "AddressLine01" : "AddressLine01",
      "SignupToken" : "SignupToken"
    },
    "FirstName" : "FirstName",
    "OrganisationId" : 6,
    "Roles" : 1,
    "IsAccountActive" : true,
    "Id" : 0,
    "LastName" : "LastName",
    "AlertSettings" : 5,
    "EmailAddress" : "EmailAddress"
  }, {
    "IsSubscribedToNewsletter" : true,
    "SetupWizardRequired" : true,
    "UserName" : "UserName",
    "Organisation" : {
      "Timezone" : "Timezone",
      "Suburb" : "Suburb",
      "SubscriptionCustomerId" : "SubscriptionCustomerId",
      "SubscriptionPlanId" : "SubscriptionPlanId",
      "Postcode" : "Postcode",
      "EmailAddress" : "EmailAddress",
      "Name" : "Name",
      "NumberSeatsAvailable" : 6,
      "State" : "State",
      "Phone" : "Phone",
      "AddressLine02" : "AddressLine02",
      "Country" : "Country",
      "Id" : 0,
      "AddressLine01" : "AddressLine01",
      "SignupToken" : "SignupToken"
    },
    "FirstName" : "FirstName",
    "OrganisationId" : 6,
    "Roles" : 1,
    "IsAccountActive" : true,
    "Id" : 0,
    "LastName" : "LastName",
    "AlertSettings" : 5,
    "EmailAddress" : "EmailAddress"
  } ]
}}, {contentType=application/xml, example=<null>
  <Status>123</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CsApiApiResponseListUserForManagement> 
     */
    open class func usersGetTimesheetUsersWithRequestBuilder(xChronosheetsAuth: String) -> RequestBuilder<CsApiApiResponseListUserForManagement> {
        let path = "/api/Users/GetTimesheetUsers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CsApiApiResponseListUserForManagement>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update a user
     
     - parameter request: (body)  
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUpdateTimesheetUser(request: CsApiUpdateUserRequest, xChronosheetsAuth: String, completion: @escaping ((_ data: CsApiApiResponseUpdateUserResponse?,_ error: Error?) -> Void)) {
        usersUpdateTimesheetUserWithRequestBuilder(request: request, xChronosheetsAuth: xChronosheetsAuth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update a user
     - POST /api/Users/UpdateTimesheetUser
     - examples: [{contentType=application/json, example={
  "Status" : 1,
  "Message" : "Message",
  "Data" : {
    "ValidationErrors" : [ "ValidationErrors", "ValidationErrors" ],
    "UserId" : 6,
    "OrganisationId" : 0
  }
}}, {contentType=application/xml, example=<null>
  <Status>123</Status>
  <Message>aeiou</Message>
</null>}]
     - examples: [{contentType=application/json, example={
  "Status" : 1,
  "Message" : "Message",
  "Data" : {
    "ValidationErrors" : [ "ValidationErrors", "ValidationErrors" ],
    "UserId" : 6,
    "OrganisationId" : 0
  }
}}, {contentType=application/xml, example=<null>
  <Status>123</Status>
  <Message>aeiou</Message>
</null>}]
     
     - parameter request: (body)  
     - parameter xChronosheetsAuth: (header) The ChronoSheets Auth Token 

     - returns: RequestBuilder<CsApiApiResponseUpdateUserResponse> 
     */
    open class func usersUpdateTimesheetUserWithRequestBuilder(request: CsApiUpdateUserRequest, xChronosheetsAuth: String) -> RequestBuilder<CsApiApiResponseUpdateUserResponse> {
        let path = "/api/Users/UpdateTimesheetUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "x-chronosheets-auth": xChronosheetsAuth
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CsApiApiResponseUpdateUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
