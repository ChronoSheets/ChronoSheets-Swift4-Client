//
// CsApiJobTotalsReportItem.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CsApiJobTotalsReportItem: Codable {

    public var organisationId: Int?
    public var jobId: Int?
    public var jobCode: String?
    public var clientId: Int?
    public var clientName: String?
    public var projectId: Int?
    public var projectName: String?
    public var spanSeconds: Int?


    
    public init(organisationId: Int?, jobId: Int?, jobCode: String?, clientId: Int?, clientName: String?, projectId: Int?, projectName: String?, spanSeconds: Int?) {
        self.organisationId = organisationId
        self.jobId = jobId
        self.jobCode = jobCode
        self.clientId = clientId
        self.clientName = clientName
        self.projectId = projectId
        self.projectName = projectName
        self.spanSeconds = spanSeconds
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(organisationId, forKey: "OrganisationId")
        try container.encodeIfPresent(jobId, forKey: "JobId")
        try container.encodeIfPresent(jobCode, forKey: "JobCode")
        try container.encodeIfPresent(clientId, forKey: "ClientId")
        try container.encodeIfPresent(clientName, forKey: "ClientName")
        try container.encodeIfPresent(projectId, forKey: "ProjectId")
        try container.encodeIfPresent(projectName, forKey: "ProjectName")
        try container.encodeIfPresent(spanSeconds, forKey: "SpanSeconds")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        organisationId = try container.decodeIfPresent(Int.self, forKey: "OrganisationId")
        jobId = try container.decodeIfPresent(Int.self, forKey: "JobId")
        jobCode = try container.decodeIfPresent(String.self, forKey: "JobCode")
        clientId = try container.decodeIfPresent(Int.self, forKey: "ClientId")
        clientName = try container.decodeIfPresent(String.self, forKey: "ClientName")
        projectId = try container.decodeIfPresent(Int.self, forKey: "ProjectId")
        projectName = try container.decodeIfPresent(String.self, forKey: "ProjectName")
        spanSeconds = try container.decodeIfPresent(Int.self, forKey: "SpanSeconds")
    }
}

