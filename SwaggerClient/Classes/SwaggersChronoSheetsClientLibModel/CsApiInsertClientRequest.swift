//
// CsApiInsertClientRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CsApiInsertClientRequest: Codable {

    public var clientName: String?
    public var clientAddressLine1: String?
    public var clientAddressLine2: String?
    public var clientSuburb: String?
    public var clientState: String?
    public var clientPostCode: String?
    public var personOfContact: String?
    public var clientPhoneNumber: String?
    public var clientMobileNumber: String?
    public var clientEmailAddress: String?
    public var clientWebURL: String?


    
    public init(clientName: String?, clientAddressLine1: String?, clientAddressLine2: String?, clientSuburb: String?, clientState: String?, clientPostCode: String?, personOfContact: String?, clientPhoneNumber: String?, clientMobileNumber: String?, clientEmailAddress: String?, clientWebURL: String?) {
        self.clientName = clientName
        self.clientAddressLine1 = clientAddressLine1
        self.clientAddressLine2 = clientAddressLine2
        self.clientSuburb = clientSuburb
        self.clientState = clientState
        self.clientPostCode = clientPostCode
        self.personOfContact = personOfContact
        self.clientPhoneNumber = clientPhoneNumber
        self.clientMobileNumber = clientMobileNumber
        self.clientEmailAddress = clientEmailAddress
        self.clientWebURL = clientWebURL
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(clientName, forKey: "ClientName")
        try container.encodeIfPresent(clientAddressLine1, forKey: "ClientAddressLine1")
        try container.encodeIfPresent(clientAddressLine2, forKey: "ClientAddressLine2")
        try container.encodeIfPresent(clientSuburb, forKey: "ClientSuburb")
        try container.encodeIfPresent(clientState, forKey: "ClientState")
        try container.encodeIfPresent(clientPostCode, forKey: "ClientPostCode")
        try container.encodeIfPresent(personOfContact, forKey: "PersonOfContact")
        try container.encodeIfPresent(clientPhoneNumber, forKey: "ClientPhoneNumber")
        try container.encodeIfPresent(clientMobileNumber, forKey: "ClientMobileNumber")
        try container.encodeIfPresent(clientEmailAddress, forKey: "ClientEmailAddress")
        try container.encodeIfPresent(clientWebURL, forKey: "ClientWebURL")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        clientName = try container.decodeIfPresent(String.self, forKey: "ClientName")
        clientAddressLine1 = try container.decodeIfPresent(String.self, forKey: "ClientAddressLine1")
        clientAddressLine2 = try container.decodeIfPresent(String.self, forKey: "ClientAddressLine2")
        clientSuburb = try container.decodeIfPresent(String.self, forKey: "ClientSuburb")
        clientState = try container.decodeIfPresent(String.self, forKey: "ClientState")
        clientPostCode = try container.decodeIfPresent(String.self, forKey: "ClientPostCode")
        personOfContact = try container.decodeIfPresent(String.self, forKey: "PersonOfContact")
        clientPhoneNumber = try container.decodeIfPresent(String.self, forKey: "ClientPhoneNumber")
        clientMobileNumber = try container.decodeIfPresent(String.self, forKey: "ClientMobileNumber")
        clientEmailAddress = try container.decodeIfPresent(String.self, forKey: "ClientEmailAddress")
        clientWebURL = try container.decodeIfPresent(String.self, forKey: "ClientWebURL")
    }
}

