//
// CSProjectCostingReportItem.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CSProjectCostingReportItem: Codable {

    public var projectId: Int?
    public var projectName: String?
    public var clientId: Int?
    public var organisationId: Int?
    public var clientName: String?
    public var estimatedCost: Double?
    public var actualCostFiltered: Double?
    public var actualCost: Double?


    
    public init(projectId: Int?, projectName: String?, clientId: Int?, organisationId: Int?, clientName: String?, estimatedCost: Double?, actualCostFiltered: Double?, actualCost: Double?) {
        self.projectId = projectId
        self.projectName = projectName
        self.clientId = clientId
        self.organisationId = organisationId
        self.clientName = clientName
        self.estimatedCost = estimatedCost
        self.actualCostFiltered = actualCostFiltered
        self.actualCost = actualCost
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(projectId, forKey: "ProjectId")
        try container.encodeIfPresent(projectName, forKey: "ProjectName")
        try container.encodeIfPresent(clientId, forKey: "ClientId")
        try container.encodeIfPresent(organisationId, forKey: "OrganisationId")
        try container.encodeIfPresent(clientName, forKey: "ClientName")
        try container.encodeIfPresent(estimatedCost, forKey: "EstimatedCost")
        try container.encodeIfPresent(actualCostFiltered, forKey: "ActualCostFiltered")
        try container.encodeIfPresent(actualCost, forKey: "ActualCost")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        projectId = try container.decodeIfPresent(Int.self, forKey: "ProjectId")
        projectName = try container.decodeIfPresent(String.self, forKey: "ProjectName")
        clientId = try container.decodeIfPresent(Int.self, forKey: "ClientId")
        organisationId = try container.decodeIfPresent(Int.self, forKey: "OrganisationId")
        clientName = try container.decodeIfPresent(String.self, forKey: "ClientName")
        estimatedCost = try container.decodeIfPresent(Double.self, forKey: "EstimatedCost")
        actualCostFiltered = try container.decodeIfPresent(Double.self, forKey: "ActualCostFiltered")
        actualCost = try container.decodeIfPresent(Double.self, forKey: "ActualCost")
    }
}

