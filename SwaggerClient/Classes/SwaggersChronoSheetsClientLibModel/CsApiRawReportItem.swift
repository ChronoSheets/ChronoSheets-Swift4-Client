//
// CsApiRawReportItem.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CsApiRawReportItem: Codable {

    public var organisationId: Int?
    public var userId: Int?
    public var username: String?
    public var emailAddress: String?
    public var jobCode: String?
    public var taskName: String?
    public var clientName: String?
    public var projectName: String?
    public var startDate: Date?
    public var endDate: Date?
    public var spanSeconds: Int?
    public var description: String?
    public var payAmount: Double?
    public var payOvertimeAmount: Double?
    public var tripCost: Double?
    public var tripDistanceMeters: Double?


    
    public init(organisationId: Int?, userId: Int?, username: String?, emailAddress: String?, jobCode: String?, taskName: String?, clientName: String?, projectName: String?, startDate: Date?, endDate: Date?, spanSeconds: Int?, description: String?, payAmount: Double?, payOvertimeAmount: Double?, tripCost: Double?, tripDistanceMeters: Double?) {
        self.organisationId = organisationId
        self.userId = userId
        self.username = username
        self.emailAddress = emailAddress
        self.jobCode = jobCode
        self.taskName = taskName
        self.clientName = clientName
        self.projectName = projectName
        self.startDate = startDate
        self.endDate = endDate
        self.spanSeconds = spanSeconds
        self.description = description
        self.payAmount = payAmount
        self.payOvertimeAmount = payOvertimeAmount
        self.tripCost = tripCost
        self.tripDistanceMeters = tripDistanceMeters
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(organisationId, forKey: "OrganisationId")
        try container.encodeIfPresent(userId, forKey: "UserId")
        try container.encodeIfPresent(username, forKey: "Username")
        try container.encodeIfPresent(emailAddress, forKey: "EmailAddress")
        try container.encodeIfPresent(jobCode, forKey: "JobCode")
        try container.encodeIfPresent(taskName, forKey: "TaskName")
        try container.encodeIfPresent(clientName, forKey: "ClientName")
        try container.encodeIfPresent(projectName, forKey: "ProjectName")
        try container.encodeIfPresent(startDate, forKey: "StartDate")
        try container.encodeIfPresent(endDate, forKey: "EndDate")
        try container.encodeIfPresent(spanSeconds, forKey: "SpanSeconds")
        try container.encodeIfPresent(description, forKey: "Description")
        try container.encodeIfPresent(payAmount, forKey: "PayAmount")
        try container.encodeIfPresent(payOvertimeAmount, forKey: "PayOvertimeAmount")
        try container.encodeIfPresent(tripCost, forKey: "TripCost")
        try container.encodeIfPresent(tripDistanceMeters, forKey: "TripDistanceMeters")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        organisationId = try container.decodeIfPresent(Int.self, forKey: "OrganisationId")
        userId = try container.decodeIfPresent(Int.self, forKey: "UserId")
        username = try container.decodeIfPresent(String.self, forKey: "Username")
        emailAddress = try container.decodeIfPresent(String.self, forKey: "EmailAddress")
        jobCode = try container.decodeIfPresent(String.self, forKey: "JobCode")
        taskName = try container.decodeIfPresent(String.self, forKey: "TaskName")
        clientName = try container.decodeIfPresent(String.self, forKey: "ClientName")
        projectName = try container.decodeIfPresent(String.self, forKey: "ProjectName")
        startDate = try container.decodeIfPresent(Date.self, forKey: "StartDate")
        endDate = try container.decodeIfPresent(Date.self, forKey: "EndDate")
        spanSeconds = try container.decodeIfPresent(Int.self, forKey: "SpanSeconds")
        description = try container.decodeIfPresent(String.self, forKey: "Description")
        payAmount = try container.decodeIfPresent(Double.self, forKey: "PayAmount")
        payOvertimeAmount = try container.decodeIfPresent(Double.self, forKey: "PayOvertimeAmount")
        tripCost = try container.decodeIfPresent(Double.self, forKey: "TripCost")
        tripDistanceMeters = try container.decodeIfPresent(Double.self, forKey: "TripDistanceMeters")
    }
}

