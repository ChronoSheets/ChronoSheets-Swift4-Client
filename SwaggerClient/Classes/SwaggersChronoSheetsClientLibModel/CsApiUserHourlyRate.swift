//
// CsApiUserHourlyRate.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CsApiUserHourlyRate: Codable {

    public var rateId: Int?
    public var userId: Int?
    public var organisationId: Int?
    public var isCurrent: Bool?
    public var hourlyRate: Double?
    public var hourlyOvertimeRate: Double?
    public var startDateTime: Date?
    public var endDateTime: Date?


    
    public init(rateId: Int?, userId: Int?, organisationId: Int?, isCurrent: Bool?, hourlyRate: Double?, hourlyOvertimeRate: Double?, startDateTime: Date?, endDateTime: Date?) {
        self.rateId = rateId
        self.userId = userId
        self.organisationId = organisationId
        self.isCurrent = isCurrent
        self.hourlyRate = hourlyRate
        self.hourlyOvertimeRate = hourlyOvertimeRate
        self.startDateTime = startDateTime
        self.endDateTime = endDateTime
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(rateId, forKey: "RateId")
        try container.encodeIfPresent(userId, forKey: "UserId")
        try container.encodeIfPresent(organisationId, forKey: "OrganisationId")
        try container.encodeIfPresent(isCurrent, forKey: "IsCurrent")
        try container.encodeIfPresent(hourlyRate, forKey: "HourlyRate")
        try container.encodeIfPresent(hourlyOvertimeRate, forKey: "HourlyOvertimeRate")
        try container.encodeIfPresent(startDateTime, forKey: "StartDateTime")
        try container.encodeIfPresent(endDateTime, forKey: "EndDateTime")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        rateId = try container.decodeIfPresent(Int.self, forKey: "RateId")
        userId = try container.decodeIfPresent(Int.self, forKey: "UserId")
        organisationId = try container.decodeIfPresent(Int.self, forKey: "OrganisationId")
        isCurrent = try container.decodeIfPresent(Bool.self, forKey: "IsCurrent")
        hourlyRate = try container.decodeIfPresent(Double.self, forKey: "HourlyRate")
        hourlyOvertimeRate = try container.decodeIfPresent(Double.self, forKey: "HourlyOvertimeRate")
        startDateTime = try container.decodeIfPresent(Date.self, forKey: "StartDateTime")
        endDateTime = try container.decodeIfPresent(Date.self, forKey: "EndDateTime")
    }
}

