//
// CSUpdateMyProfileRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CSUpdateMyProfileRequest: Codable {

    public var emailAddress: String?
    public var firstName: String?
    public var lastName: String?
    public var oldPassword: String?
    public var newPassword: String?
    public var confirmNewPassword: String?
    public var isSubscribedToNewsletter: Bool?
    public var wantsToChangePassword: Bool?


    
    public init(emailAddress: String?, firstName: String?, lastName: String?, oldPassword: String?, newPassword: String?, confirmNewPassword: String?, isSubscribedToNewsletter: Bool?, wantsToChangePassword: Bool?) {
        self.emailAddress = emailAddress
        self.firstName = firstName
        self.lastName = lastName
        self.oldPassword = oldPassword
        self.newPassword = newPassword
        self.confirmNewPassword = confirmNewPassword
        self.isSubscribedToNewsletter = isSubscribedToNewsletter
        self.wantsToChangePassword = wantsToChangePassword
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(emailAddress, forKey: "EmailAddress")
        try container.encodeIfPresent(firstName, forKey: "FirstName")
        try container.encodeIfPresent(lastName, forKey: "LastName")
        try container.encodeIfPresent(oldPassword, forKey: "OldPassword")
        try container.encodeIfPresent(newPassword, forKey: "NewPassword")
        try container.encodeIfPresent(confirmNewPassword, forKey: "ConfirmNewPassword")
        try container.encodeIfPresent(isSubscribedToNewsletter, forKey: "IsSubscribedToNewsletter")
        try container.encodeIfPresent(wantsToChangePassword, forKey: "WantsToChangePassword")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        emailAddress = try container.decodeIfPresent(String.self, forKey: "EmailAddress")
        firstName = try container.decodeIfPresent(String.self, forKey: "FirstName")
        lastName = try container.decodeIfPresent(String.self, forKey: "LastName")
        oldPassword = try container.decodeIfPresent(String.self, forKey: "OldPassword")
        newPassword = try container.decodeIfPresent(String.self, forKey: "NewPassword")
        confirmNewPassword = try container.decodeIfPresent(String.self, forKey: "ConfirmNewPassword")
        isSubscribedToNewsletter = try container.decodeIfPresent(Bool.self, forKey: "IsSubscribedToNewsletter")
        wantsToChangePassword = try container.decodeIfPresent(Bool.self, forKey: "WantsToChangePassword")
    }
}

