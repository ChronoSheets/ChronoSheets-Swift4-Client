//
// CSUpdateOrganisationRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CSUpdateOrganisationRequest: Codable {

    public var organsationId: Int?
    public var organisationName: String?
    public var addressLine01: String?
    public var addressLine02: String?
    public var organisationSuburb: String?
    public var organisationState: String?
    public var organisationPostcode: String?
    public var organisationCountry: String?
    public var organisationPhone: String?
    public var organisationEmailAddress: String?


    
    public init(organsationId: Int?, organisationName: String?, addressLine01: String?, addressLine02: String?, organisationSuburb: String?, organisationState: String?, organisationPostcode: String?, organisationCountry: String?, organisationPhone: String?, organisationEmailAddress: String?) {
        self.organsationId = organsationId
        self.organisationName = organisationName
        self.addressLine01 = addressLine01
        self.addressLine02 = addressLine02
        self.organisationSuburb = organisationSuburb
        self.organisationState = organisationState
        self.organisationPostcode = organisationPostcode
        self.organisationCountry = organisationCountry
        self.organisationPhone = organisationPhone
        self.organisationEmailAddress = organisationEmailAddress
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(organsationId, forKey: "OrgansationId")
        try container.encodeIfPresent(organisationName, forKey: "OrganisationName")
        try container.encodeIfPresent(addressLine01, forKey: "AddressLine01")
        try container.encodeIfPresent(addressLine02, forKey: "AddressLine02")
        try container.encodeIfPresent(organisationSuburb, forKey: "OrganisationSuburb")
        try container.encodeIfPresent(organisationState, forKey: "OrganisationState")
        try container.encodeIfPresent(organisationPostcode, forKey: "OrganisationPostcode")
        try container.encodeIfPresent(organisationCountry, forKey: "OrganisationCountry")
        try container.encodeIfPresent(organisationPhone, forKey: "OrganisationPhone")
        try container.encodeIfPresent(organisationEmailAddress, forKey: "OrganisationEmailAddress")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        organsationId = try container.decodeIfPresent(Int.self, forKey: "OrgansationId")
        organisationName = try container.decodeIfPresent(String.self, forKey: "OrganisationName")
        addressLine01 = try container.decodeIfPresent(String.self, forKey: "AddressLine01")
        addressLine02 = try container.decodeIfPresent(String.self, forKey: "AddressLine02")
        organisationSuburb = try container.decodeIfPresent(String.self, forKey: "OrganisationSuburb")
        organisationState = try container.decodeIfPresent(String.self, forKey: "OrganisationState")
        organisationPostcode = try container.decodeIfPresent(String.self, forKey: "OrganisationPostcode")
        organisationCountry = try container.decodeIfPresent(String.self, forKey: "OrganisationCountry")
        organisationPhone = try container.decodeIfPresent(String.self, forKey: "OrganisationPhone")
        organisationEmailAddress = try container.decodeIfPresent(String.self, forKey: "OrganisationEmailAddress")
    }
}

