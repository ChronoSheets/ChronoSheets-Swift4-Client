//
// CSOrgReportTimesheetFileAttachment.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CSOrgReportTimesheetFileAttachment: Codable {

    public enum CSMobilePlatform: String, Codable { 
        case unknown = "Unknown"
        case ios = "iOS"
        case android = "Android"
    }
    public enum CSAttachmentType: String, Codable { 
        case image = "Image"
        case wordDoc = "WordDoc"
        case pdf = "Pdf"
        case msspreadsheet = "MSSpreadSheet"
        case mspowerpoint = "MSPowerPoint"
        case richTextFormat = "RichTextFormat"
        case zipFile = "ZipFile"
        case other = "Other"
    }
    public var username: String?
    public var emailAddress: String?
    public var firstName: String?
    public var lastName: String?
    public var timesheetStart: Date?
    public var timesheetEnd: Date?
    public var timesheetId: Int?
    public var documentS3SignedUrl: String?
    public var imageLargeS3SignedUrl: String?
    public var imageMediumS3SignedUrl: String?
    public var imageSmallS3SignedUrl: String?
    public var fileAttachmentId: Int?
    public var userId: Int?
    public var orgId: Int?
    public var mobilePlatform: CSMobilePlatform?
    public var attachmentType: CSAttachmentType?
    public var notes: String?
    public var nonImageFilePath: String?
    public var imageLargeFilePath: String?
    public var imageMediumFilePath: String?
    public var imageSmallFilePath: String?
    public var originalFileName: String?
    public var latitude: Double?
    public var longitude: Double?
    public var dateUploaded: Date?
    public var dateImageCaptured: Date?
    public var storageAllocationBytes: Int64?


    
    public init(username: String?, emailAddress: String?, firstName: String?, lastName: String?, timesheetStart: Date?, timesheetEnd: Date?, timesheetId: Int?, documentS3SignedUrl: String?, imageLargeS3SignedUrl: String?, imageMediumS3SignedUrl: String?, imageSmallS3SignedUrl: String?, fileAttachmentId: Int?, userId: Int?, orgId: Int?, mobilePlatform: CSMobilePlatform?, attachmentType: CSAttachmentType?, notes: String?, nonImageFilePath: String?, imageLargeFilePath: String?, imageMediumFilePath: String?, imageSmallFilePath: String?, originalFileName: String?, latitude: Double?, longitude: Double?, dateUploaded: Date?, dateImageCaptured: Date?, storageAllocationBytes: Int64?) {
        self.username = username
        self.emailAddress = emailAddress
        self.firstName = firstName
        self.lastName = lastName
        self.timesheetStart = timesheetStart
        self.timesheetEnd = timesheetEnd
        self.timesheetId = timesheetId
        self.documentS3SignedUrl = documentS3SignedUrl
        self.imageLargeS3SignedUrl = imageLargeS3SignedUrl
        self.imageMediumS3SignedUrl = imageMediumS3SignedUrl
        self.imageSmallS3SignedUrl = imageSmallS3SignedUrl
        self.fileAttachmentId = fileAttachmentId
        self.userId = userId
        self.orgId = orgId
        self.mobilePlatform = mobilePlatform
        self.attachmentType = attachmentType
        self.notes = notes
        self.nonImageFilePath = nonImageFilePath
        self.imageLargeFilePath = imageLargeFilePath
        self.imageMediumFilePath = imageMediumFilePath
        self.imageSmallFilePath = imageSmallFilePath
        self.originalFileName = originalFileName
        self.latitude = latitude
        self.longitude = longitude
        self.dateUploaded = dateUploaded
        self.dateImageCaptured = dateImageCaptured
        self.storageAllocationBytes = storageAllocationBytes
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(username, forKey: "Username")
        try container.encodeIfPresent(emailAddress, forKey: "EmailAddress")
        try container.encodeIfPresent(firstName, forKey: "FirstName")
        try container.encodeIfPresent(lastName, forKey: "LastName")
        try container.encodeIfPresent(timesheetStart, forKey: "TimesheetStart")
        try container.encodeIfPresent(timesheetEnd, forKey: "TimesheetEnd")
        try container.encodeIfPresent(timesheetId, forKey: "TimesheetId")
        try container.encodeIfPresent(documentS3SignedUrl, forKey: "DocumentS3SignedUrl")
        try container.encodeIfPresent(imageLargeS3SignedUrl, forKey: "ImageLargeS3SignedUrl")
        try container.encodeIfPresent(imageMediumS3SignedUrl, forKey: "ImageMediumS3SignedUrl")
        try container.encodeIfPresent(imageSmallS3SignedUrl, forKey: "ImageSmallS3SignedUrl")
        try container.encodeIfPresent(fileAttachmentId, forKey: "FileAttachmentId")
        try container.encodeIfPresent(userId, forKey: "UserId")
        try container.encodeIfPresent(orgId, forKey: "OrgId")
        try container.encodeIfPresent(mobilePlatform, forKey: "MobilePlatform")
        try container.encodeIfPresent(attachmentType, forKey: "AttachmentType")
        try container.encodeIfPresent(notes, forKey: "Notes")
        try container.encodeIfPresent(nonImageFilePath, forKey: "NonImageFilePath")
        try container.encodeIfPresent(imageLargeFilePath, forKey: "ImageLargeFilePath")
        try container.encodeIfPresent(imageMediumFilePath, forKey: "ImageMediumFilePath")
        try container.encodeIfPresent(imageSmallFilePath, forKey: "ImageSmallFilePath")
        try container.encodeIfPresent(originalFileName, forKey: "OriginalFileName")
        try container.encodeIfPresent(latitude, forKey: "Latitude")
        try container.encodeIfPresent(longitude, forKey: "Longitude")
        try container.encodeIfPresent(dateUploaded, forKey: "DateUploaded")
        try container.encodeIfPresent(dateImageCaptured, forKey: "DateImageCaptured")
        try container.encodeIfPresent(storageAllocationBytes, forKey: "StorageAllocationBytes")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        username = try container.decodeIfPresent(String.self, forKey: "Username")
        emailAddress = try container.decodeIfPresent(String.self, forKey: "EmailAddress")
        firstName = try container.decodeIfPresent(String.self, forKey: "FirstName")
        lastName = try container.decodeIfPresent(String.self, forKey: "LastName")
        timesheetStart = try container.decodeIfPresent(Date.self, forKey: "TimesheetStart")
        timesheetEnd = try container.decodeIfPresent(Date.self, forKey: "TimesheetEnd")
        timesheetId = try container.decodeIfPresent(Int.self, forKey: "TimesheetId")
        documentS3SignedUrl = try container.decodeIfPresent(String.self, forKey: "DocumentS3SignedUrl")
        imageLargeS3SignedUrl = try container.decodeIfPresent(String.self, forKey: "ImageLargeS3SignedUrl")
        imageMediumS3SignedUrl = try container.decodeIfPresent(String.self, forKey: "ImageMediumS3SignedUrl")
        imageSmallS3SignedUrl = try container.decodeIfPresent(String.self, forKey: "ImageSmallS3SignedUrl")
        fileAttachmentId = try container.decodeIfPresent(Int.self, forKey: "FileAttachmentId")
        userId = try container.decodeIfPresent(Int.self, forKey: "UserId")
        orgId = try container.decodeIfPresent(Int.self, forKey: "OrgId")
        mobilePlatform = try container.decodeIfPresent(CSMobilePlatform.self, forKey: "MobilePlatform")
        attachmentType = try container.decodeIfPresent(CSAttachmentType.self, forKey: "AttachmentType")
        notes = try container.decodeIfPresent(String.self, forKey: "Notes")
        nonImageFilePath = try container.decodeIfPresent(String.self, forKey: "NonImageFilePath")
        imageLargeFilePath = try container.decodeIfPresent(String.self, forKey: "ImageLargeFilePath")
        imageMediumFilePath = try container.decodeIfPresent(String.self, forKey: "ImageMediumFilePath")
        imageSmallFilePath = try container.decodeIfPresent(String.self, forKey: "ImageSmallFilePath")
        originalFileName = try container.decodeIfPresent(String.self, forKey: "OriginalFileName")
        latitude = try container.decodeIfPresent(Double.self, forKey: "Latitude")
        longitude = try container.decodeIfPresent(Double.self, forKey: "Longitude")
        dateUploaded = try container.decodeIfPresent(Date.self, forKey: "DateUploaded")
        dateImageCaptured = try container.decodeIfPresent(Date.self, forKey: "DateImageCaptured")
        storageAllocationBytes = try container.decodeIfPresent(Int64.self, forKey: "StorageAllocationBytes")
    }
}

