//
// CsApiTimeSlot.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CsApiTimeSlot: Codable {

    public enum CsApiDayType: String, Codable { 
        case monday = "Monday"
        case tuesday = "Tuesday"
        case wednesday = "Wednesday"
        case thursday = "Thursday"
        case friday = "Friday"
        case saturday = "Saturday"
        case sunday = "Sunday"
    }
    public var dayType: CsApiDayType?
    public var usualHourId: Int?
    public var startHour: Int?
    public var startMinute: Int?
    public var endHour: Int?
    public var endMinute: Int?
    public var isValid: Bool?


    
    public init(dayType: CsApiDayType?, usualHourId: Int?, startHour: Int?, startMinute: Int?, endHour: Int?, endMinute: Int?, isValid: Bool?) {
        self.dayType = dayType
        self.usualHourId = usualHourId
        self.startHour = startHour
        self.startMinute = startMinute
        self.endHour = endHour
        self.endMinute = endMinute
        self.isValid = isValid
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(dayType, forKey: "DayType")
        try container.encodeIfPresent(usualHourId, forKey: "UsualHourId")
        try container.encodeIfPresent(startHour, forKey: "StartHour")
        try container.encodeIfPresent(startMinute, forKey: "StartMinute")
        try container.encodeIfPresent(endHour, forKey: "EndHour")
        try container.encodeIfPresent(endMinute, forKey: "EndMinute")
        try container.encodeIfPresent(isValid, forKey: "IsValid")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        dayType = try container.decodeIfPresent(CsApiDayType.self, forKey: "DayType")
        usualHourId = try container.decodeIfPresent(Int.self, forKey: "UsualHourId")
        startHour = try container.decodeIfPresent(Int.self, forKey: "StartHour")
        startMinute = try container.decodeIfPresent(Int.self, forKey: "StartMinute")
        endHour = try container.decodeIfPresent(Int.self, forKey: "EndHour")
        endMinute = try container.decodeIfPresent(Int.self, forKey: "EndMinute")
        isValid = try container.decodeIfPresent(Bool.self, forKey: "IsValid")
    }
}

